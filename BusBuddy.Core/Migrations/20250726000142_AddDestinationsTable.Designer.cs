// <auto-generated />
using System;
using BusBuddy.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusBuddy.Core.Migrations
{
    [DbContext(typeof(BusBuddyContext))]
    [Migration("20250726000142_AddDestinationsTable")]
    partial class AddDestinationsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("BusBuddy.Core.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivityCategory")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ApprovalRequired")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("AssignedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("DestinationLatitude")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("DestinationLongitude")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("DestinationOverride")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Directions")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DistanceMiles")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<TimeSpan?>("EstimatedTravelTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EventTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExpectedPassengers")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("LeaveTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PickupLatitude")
                        .HasColumnType("decimal(10,8)");

                    b.Property<string>("PickupLocation")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PickupLongitude")
                        .HasColumnType("decimal(11,8)");

                    b.Property<int?>("RecurringSeriesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ReturnTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RouteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("StudentsCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("DriverId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            ActivityId = 1,
                            ActivityType = "Field Trip",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 1,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Natural History Museum",
                            DriverId = 1,
                            EventTime = new TimeSpan(0, 10, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 8, 30, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Mrs. Thompson",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 45
                        },
                        new
                        {
                            ActivityId = 2,
                            ActivityType = "Sports Event",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 2,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Central High School",
                            DriverId = 2,
                            EventTime = new TimeSpan(0, 15, 30, 0, 0),
                            LeaveTime = new TimeSpan(0, 14, 0, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Coach Martinez",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 22
                        },
                        new
                        {
                            ActivityId = 3,
                            ActivityType = "Academic Competition",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 3,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "University Campus",
                            DriverId = 3,
                            EventTime = new TimeSpan(0, 9, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 7, 45, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Mr. Chen",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 15
                        },
                        new
                        {
                            ActivityId = 4,
                            ActivityType = "Field Trip",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 4,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Science Center",
                            DriverId = 4,
                            EventTime = new TimeSpan(0, 10, 30, 0, 0),
                            LeaveTime = new TimeSpan(0, 9, 15, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Ms. Garcia",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 38
                        },
                        new
                        {
                            ActivityId = 5,
                            ActivityType = "Band Competition",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 5,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Performing Arts Center",
                            DriverId = 5,
                            EventTime = new TimeSpan(0, 14, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 12, 0, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Mr. Wilson",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 65
                        },
                        new
                        {
                            ActivityId = 6,
                            ActivityType = "Sports Event",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 6,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Regional Stadium",
                            DriverId = 6,
                            EventTime = new TimeSpan(0, 18, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 16, 30, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Coach Brown",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 28
                        },
                        new
                        {
                            ActivityId = 7,
                            ActivityType = "Community Service",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 7,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Local Food Bank",
                            DriverId = 7,
                            EventTime = new TimeSpan(0, 9, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 8, 0, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Mrs. Martinez",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 20
                        },
                        new
                        {
                            ActivityId = 8,
                            ActivityType = "Field Trip",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 8,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Art Museum",
                            DriverId = 8,
                            EventTime = new TimeSpan(0, 12, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 10, 45, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Ms. Lee",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 32
                        },
                        new
                        {
                            ActivityId = 9,
                            ActivityType = "Academic Competition",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 9,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Convention Center",
                            DriverId = 9,
                            EventTime = new TimeSpan(0, 8, 45, 0, 0),
                            LeaveTime = new TimeSpan(0, 7, 30, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Mr. Davis",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 12
                        },
                        new
                        {
                            ActivityId = 10,
                            ActivityType = "Sports Event",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 10,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Aquatic Center",
                            DriverId = 10,
                            EventTime = new TimeSpan(0, 15, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 13, 15, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Coach Thompson",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 18
                        },
                        new
                        {
                            ActivityId = 11,
                            ActivityType = "Field Trip",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 11,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Planetarium",
                            DriverId = 11,
                            EventTime = new TimeSpan(0, 11, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 9, 30, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Dr. Anderson",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 25
                        },
                        new
                        {
                            ActivityId = 12,
                            ActivityType = "Drama Performance",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 12,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Community Theater",
                            DriverId = 12,
                            EventTime = new TimeSpan(0, 19, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 17, 0, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Ms. White",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 35
                        },
                        new
                        {
                            ActivityId = 13,
                            ActivityType = "Environmental Study",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 13,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Nature Reserve",
                            DriverId = 13,
                            EventTime = new TimeSpan(0, 9, 30, 0, 0),
                            LeaveTime = new TimeSpan(0, 8, 15, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Mr. Moore",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 28
                        },
                        new
                        {
                            ActivityId = 14,
                            ActivityType = "Career Fair",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 14,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Business District",
                            DriverId = 14,
                            EventTime = new TimeSpan(0, 13, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 11, 30, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Ms. Taylor",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 42
                        },
                        new
                        {
                            ActivityId = 15,
                            ActivityType = "Sports Event",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 15,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Golf Course",
                            DriverId = 15,
                            EventTime = new TimeSpan(0, 8, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 6, 45, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Coach Jackson",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 8
                        },
                        new
                        {
                            ActivityId = 16,
                            ActivityType = "Field Trip",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 1,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Historical Society",
                            DriverId = 16,
                            EventTime = new TimeSpan(0, 11, 30, 0, 0),
                            LeaveTime = new TimeSpan(0, 10, 0, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Mrs. Miller",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 30
                        },
                        new
                        {
                            ActivityId = 17,
                            ActivityType = "Academic Competition",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 2,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Tech Campus",
                            DriverId = 17,
                            EventTime = new TimeSpan(0, 8, 30, 0, 0),
                            LeaveTime = new TimeSpan(0, 7, 15, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Mr. Harris",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 16
                        },
                        new
                        {
                            ActivityId = 18,
                            ActivityType = "Community Event",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 3,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "City Hall",
                            DriverId = 18,
                            EventTime = new TimeSpan(0, 16, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 14, 30, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Ms. Clark",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 50
                        },
                        new
                        {
                            ActivityId = 19,
                            ActivityType = "Sports Event",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 4,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Tennis Complex",
                            DriverId = 19,
                            EventTime = new TimeSpan(0, 17, 15, 0, 0),
                            LeaveTime = new TimeSpan(0, 15, 45, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Coach Lewis",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 12
                        },
                        new
                        {
                            ActivityId = 20,
                            ActivityType = "Field Trip",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 5,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Botanical Gardens",
                            DriverId = 20,
                            EventTime = new TimeSpan(0, 10, 15, 0, 0),
                            LeaveTime = new TimeSpan(0, 9, 0, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Mrs. Walker",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 40
                        },
                        new
                        {
                            ActivityId = 21,
                            ActivityType = "Music Festival",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 6,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Concert Hall",
                            DriverId = 1,
                            EventTime = new TimeSpan(0, 15, 30, 0, 0),
                            LeaveTime = new TimeSpan(0, 13, 30, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Mr. Rodriguez",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 55
                        },
                        new
                        {
                            ActivityId = 22,
                            ActivityType = "Science Fair",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 7,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Exhibition Center",
                            DriverId = 2,
                            EventTime = new TimeSpan(0, 10, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 8, 45, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Dr. Johnson",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 33
                        },
                        new
                        {
                            ActivityId = 23,
                            ActivityType = "Sports Event",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 8,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Basketball Arena",
                            DriverId = 3,
                            EventTime = new TimeSpan(0, 19, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 17, 15, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Coach Chen",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 24
                        },
                        new
                        {
                            ActivityId = 24,
                            ActivityType = "Cultural Exchange",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 9,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "International Center",
                            DriverId = 4,
                            EventTime = new TimeSpan(0, 12, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 10, 30, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Ms. Garcia",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 38
                        },
                        new
                        {
                            ActivityId = 25,
                            ActivityType = "Field Trip",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 10,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Space Center",
                            DriverId = 5,
                            EventTime = new TimeSpan(0, 9, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 7, 0, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Mr. Wilson",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 48
                        },
                        new
                        {
                            ActivityId = 26,
                            ActivityType = "Volunteer Work",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 11,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Senior Center",
                            DriverId = 6,
                            EventTime = new TimeSpan(0, 15, 30, 0, 0),
                            LeaveTime = new TimeSpan(0, 14, 0, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Mrs. Brown",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 22
                        },
                        new
                        {
                            ActivityId = 27,
                            ActivityType = "Academic Competition",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 12,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Library",
                            DriverId = 7,
                            EventTime = new TimeSpan(0, 11, 15, 0, 0),
                            LeaveTime = new TimeSpan(0, 9, 45, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Mr. Martinez",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 14
                        },
                        new
                        {
                            ActivityId = 28,
                            ActivityType = "Sports Event",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 13,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Soccer Complex",
                            DriverId = 8,
                            EventTime = new TimeSpan(0, 18, 30, 0, 0),
                            LeaveTime = new TimeSpan(0, 16, 0, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Coach Lee",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 26
                        },
                        new
                        {
                            ActivityId = 29,
                            ActivityType = "Field Trip",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 14,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Observatory",
                            DriverId = 9,
                            EventTime = new TimeSpan(0, 21, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 19, 30, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Dr. Davis",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 20
                        },
                        new
                        {
                            ActivityId = 30,
                            ActivityType = "Graduation Ceremony",
                            ApprovalRequired = true,
                            Approved = false,
                            AssignedVehicleId = 15,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Destination = "Auditorium",
                            DriverId = 10,
                            EventTime = new TimeSpan(0, 19, 0, 0, 0),
                            LeaveTime = new TimeSpan(0, 17, 30, 0, 0),
                            PickupLocation = "School",
                            RequestedBy = "Principal Thompson",
                            ReturnTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = "Scheduled",
                            StudentsCount = 75
                        });
                });

            modelBuilder.Entity("BusBuddy.Core.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.ActivitySchedule", b =>
                {
                    b.Property<int>("ActivityScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduledDestination")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("ScheduledDriverId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("ScheduledEventTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ScheduledLeaveTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScheduledRiders")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScheduledVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TripEventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TripType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityScheduleId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ScheduledDriverId");

                    b.HasIndex("TripEventId");

                    b.ToTable("ActivitySchedule");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Destination", b =>
                {
                    b.Property<int>("DestinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DestinationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11,8)");

                    b.Property<int?>("MaxCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialRequirements")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("DestinationId");

                    b.HasIndex("DestinationType")
                        .HasDatabaseName("IX_Destinations_Type");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Destinations_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Destinations_Name");

                    b.ToTable("Destinations");

                    b.HasData(
                        new
                        {
                            DestinationId = 1,
                            Address = "200 Central Park West",
                            City = "New York",
                            ContactEmail = "education@amnh.org",
                            ContactName = "Education Director",
                            ContactPhone = "212-769-5100",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Field Trip",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 40.7813m,
                            Longitude = -73.9740m,
                            MaxCapacity = 200,
                            Name = "Natural History Museum",
                            State = "NY",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(2979),
                            ZipCode = "10024"
                        },
                        new
                        {
                            DestinationId = 2,
                            Address = "1234 Education Blvd",
                            City = "Springfield",
                            ContactEmail = "athletics@centralhs.edu",
                            ContactName = "Athletic Director",
                            ContactPhone = "217-555-0200",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Sports Event",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 39.7817m,
                            Longitude = -89.6501m,
                            MaxCapacity = 500,
                            Name = "Central High School",
                            State = "IL",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(4406),
                            ZipCode = "62701"
                        },
                        new
                        {
                            DestinationId = 3,
                            Address = "456 University Ave",
                            City = "Champaign",
                            ContactEmail = "competitions@university.edu",
                            ContactName = "Competition Coordinator",
                            ContactPhone = "217-555-0300",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Academic Competition",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 40.1020m,
                            Longitude = -88.2272m,
                            MaxCapacity = 150,
                            Name = "University Campus Science Building",
                            State = "IL",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(4411),
                            ZipCode = "61820"
                        },
                        new
                        {
                            DestinationId = 4,
                            Address = "789 Discovery Lane",
                            City = "Peoria",
                            ContactEmail = "programs@sciencecenter.org",
                            ContactName = "Program Manager",
                            ContactPhone = "309-555-0400",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Field Trip",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 40.6936m,
                            Longitude = -89.5890m,
                            MaxCapacity = 180,
                            Name = "Regional Science Center",
                            State = "IL",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(4423),
                            ZipCode = "61602"
                        },
                        new
                        {
                            DestinationId = 5,
                            Address = "321 Arts Plaza",
                            City = "Bloomington",
                            ContactEmail = "events@pacenter.org",
                            ContactName = "Event Coordinator",
                            ContactPhone = "309-555-0500",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Band Competition",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 40.4842m,
                            Longitude = -88.9937m,
                            MaxCapacity = 300,
                            Name = "Performing Arts Center",
                            State = "IL",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(4426),
                            ZipCode = "61701"
                        },
                        new
                        {
                            DestinationId = 6,
                            Address = "654 Sports Complex Dr",
                            City = "Normal",
                            ContactEmail = "manager@regionalstadium.com",
                            ContactName = "Stadium Manager",
                            ContactPhone = "309-555-0600",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Sports Event",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 40.5142m,
                            Longitude = -88.9906m,
                            MaxCapacity = 1000,
                            Name = "Regional Stadium",
                            State = "IL",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(4429),
                            ZipCode = "61761"
                        },
                        new
                        {
                            DestinationId = 7,
                            Address = "987 Volunteer Way",
                            City = "Decatur",
                            ContactEmail = "volunteers@foodbank.org",
                            ContactName = "Volunteer Coordinator",
                            ContactPhone = "217-555-0700",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Community Service",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 39.8403m,
                            Longitude = -88.9548m,
                            MaxCapacity = 50,
                            Name = "Community Food Bank",
                            State = "IL",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(4432),
                            ZipCode = "62521"
                        },
                        new
                        {
                            DestinationId = 8,
                            Address = "147 Culture Street",
                            City = "Chicago",
                            ContactEmail = "education@metart.org",
                            ContactName = "Education Specialist",
                            ContactPhone = "312-555-0800",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Field Trip",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 41.8781m,
                            Longitude = -87.6298m,
                            MaxCapacity = 250,
                            Name = "Metropolitan Art Museum",
                            State = "IL",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(4435),
                            ZipCode = "60601"
                        },
                        new
                        {
                            DestinationId = 9,
                            Address = "258 Conference Blvd",
                            City = "Rockford",
                            ContactEmail = "services@conventioncenter.com",
                            ContactName = "Event Services",
                            ContactPhone = "815-555-0900",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Academic Competition",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 42.2711m,
                            Longitude = -89.0940m,
                            MaxCapacity = 400,
                            Name = "Convention Center East",
                            State = "IL",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(4452),
                            ZipCode = "61101"
                        },
                        new
                        {
                            DestinationId = 10,
                            Address = "369 Pool Lane",
                            City = "Carbondale",
                            ContactEmail = "manager@aquaticcenter.com",
                            ContactName = "Facility Manager",
                            ContactPhone = "618-555-1000",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Sports Event",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 37.7273m,
                            Longitude = -89.2167m,
                            MaxCapacity = 200,
                            Name = "Aquatic Center",
                            State = "IL",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(4455),
                            ZipCode = "62901"
                        },
                        new
                        {
                            DestinationId = 11,
                            Address = "741 Galaxy Road",
                            City = "Aurora",
                            ContactEmail = "education@planetarium.org",
                            ContactName = "Education Director",
                            ContactPhone = "630-555-1100",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Field Trip",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 41.7606m,
                            Longitude = -88.3201m,
                            MaxCapacity = 120,
                            Name = "Planetarium & Space Center",
                            State = "IL",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(4458),
                            ZipCode = "60506"
                        },
                        new
                        {
                            DestinationId = 12,
                            Address = "852 Stage Avenue",
                            City = "Joliet",
                            ContactEmail = "manager@communitytheatre.org",
                            ContactName = "Theater Manager",
                            ContactPhone = "815-555-1200",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Drama Performance",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 41.5250m,
                            Longitude = -88.0817m,
                            MaxCapacity = 180,
                            Name = "Community Theater",
                            State = "IL",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(4461),
                            ZipCode = "60431"
                        },
                        new
                        {
                            DestinationId = 13,
                            Address = "963 Conservation Trail",
                            City = "Champaign",
                            ContactEmail = "ranger@prairiepark.gov",
                            ContactName = "Park Ranger",
                            ContactPhone = "217-555-1300",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Field Trip",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 40.1164m,
                            Longitude = -88.2434m,
                            MaxCapacity = 80,
                            Name = "Prairie Nature Reserve",
                            SpecialRequirements = "Weather-dependent, hiking boots recommended",
                            State = "IL",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(4464),
                            ZipCode = "61822"
                        },
                        new
                        {
                            DestinationId = 14,
                            Address = "159 Enterprise Parkway",
                            City = "Schaumburg",
                            ContactEmail = "careers@bizdistrict.com",
                            ContactName = "Career Coordinator",
                            ContactPhone = "847-555-1400",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Career Fair",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 42.0334m,
                            Longitude = -88.0834m,
                            MaxCapacity = 300,
                            Name = "Business Innovation District",
                            State = "IL",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(4540),
                            ZipCode = "60173"
                        },
                        new
                        {
                            DestinationId = 15,
                            Address = "753 Graduation Circle",
                            City = "Springfield",
                            ContactEmail = "events@memorialaud.gov",
                            ContactName = "Event Coordinator",
                            ContactPhone = "217-555-1500",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DestinationType = "Graduation Ceremony",
                            IsActive = true,
                            IsDeleted = false,
                            Latitude = 39.7990m,
                            Longitude = -89.6439m,
                            MaxCapacity = 800,
                            Name = "Memorial Auditorium",
                            SpecialRequirements = "Formal dress code, restricted parking",
                            State = "IL",
                            UpdatedDate = new DateTime(2025, 7, 26, 0, 1, 41, 858, DateTimeKind.Utc).AddTicks(4543),
                            ZipCode = "62703"
                        });
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BackgroundCheckDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BackgroundCheckExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DriverEmail")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DriverPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("DriversLicenceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DrugTestDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DrugTestExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Endorsements")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenseClass")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LicenseExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LicenseIssueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("MedicalRestrictions")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PhysicalExamDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PhysicalExamExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Active");

                    b.Property<bool>("TrainingComplete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("DriverId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            DriverId = 1,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "m.rodriguez@busbuddy.edu",
                            DriverName = "Michael Rodriguez",
                            DriverPhone = "555-0123",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 2,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "s.johnson@busbuddy.edu",
                            DriverName = "Sarah Johnson",
                            DriverPhone = "555-0124",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 3,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "d.chen@busbuddy.edu",
                            DriverName = "David Chen",
                            DriverPhone = "555-0125",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 4,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "m.garcia@busbuddy.edu",
                            DriverName = "Maria Garcia",
                            DriverPhone = "555-0126",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 5,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "j.wilson@busbuddy.edu",
                            DriverName = "James Wilson",
                            DriverPhone = "555-0127",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 6,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "a.brown@busbuddy.edu",
                            DriverName = "Ashley Brown",
                            DriverPhone = "555-0128",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 7,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "r.martinez@busbuddy.edu",
                            DriverName = "Robert Martinez",
                            DriverPhone = "555-0129",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 8,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "j.lee@busbuddy.edu",
                            DriverName = "Jennifer Lee",
                            DriverPhone = "555-0130",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 9,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "c.davis@busbuddy.edu",
                            DriverName = "Christopher Davis",
                            DriverPhone = "555-0131",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 10,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "a.thompson@busbuddy.edu",
                            DriverName = "Amanda Thompson",
                            DriverPhone = "555-0132",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 11,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "k.anderson@busbuddy.edu",
                            DriverName = "Kevin Anderson",
                            DriverPhone = "555-0133",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 12,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "l.white@busbuddy.edu",
                            DriverName = "Lisa White",
                            DriverPhone = "555-0134",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 13,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "d.moore@busbuddy.edu",
                            DriverName = "Daniel Moore",
                            DriverPhone = "555-0135",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 14,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "n.taylor@busbuddy.edu",
                            DriverName = "Nicole Taylor",
                            DriverPhone = "555-0136",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 15,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "b.jackson@busbuddy.edu",
                            DriverName = "Brandon Jackson",
                            DriverPhone = "555-0137",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 16,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "s.miller@busbuddy.edu",
                            DriverName = "Stephanie Miller",
                            DriverPhone = "555-0138",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 17,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "a.harris@busbuddy.edu",
                            DriverName = "Andrew Harris",
                            DriverPhone = "555-0139",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 18,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "m.clark@busbuddy.edu",
                            DriverName = "Michelle Clark",
                            DriverPhone = "555-0140",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 19,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "r.lewis@busbuddy.edu",
                            DriverName = "Ryan Lewis",
                            DriverPhone = "555-0141",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        },
                        new
                        {
                            DriverId = 20,
                            CreatedDate = new DateTime(2025, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverEmail = "s.walker@busbuddy.edu",
                            DriverName = "Samantha Walker",
                            DriverPhone = "555-0142",
                            DriversLicenceType = "CDL Class B",
                            Status = "Active",
                            TrainingComplete = true
                        });
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Fuel", b =>
                {
                    b.Property<int>("FuelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FuelDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FuelLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Gallons")
                        .HasColumnType("decimal(8,3)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PricePerGallon")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("VehicleFueledId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleOdometerReading")
                        .HasColumnType("INTEGER");

                    b.HasKey("FuelId");

                    b.ToTable("Fuel");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Maintenance", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("LaborCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("LaborHours")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("MaintenanceCompleted")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextServiceDue")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NextServiceOdometer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("OdometerReading")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("PartsCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PartsUsed")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PerformedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RepairCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Warranty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("WarrantyExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("MaintenanceId");

                    b.ToTable("Maintenance");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.RouteStop", b =>
                {
                    b.Property<int>("RouteStopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("RouteId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("ScheduledArrival")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ScheduledDeparture")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("StopAddress")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("StopDuration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StopName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("StopOrder")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("RouteStopId");

                    b.ToTable("RouteStops");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("BusId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VehicleId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("DepartTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DestinationTown")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Opponent")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("RouteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("ScheduledTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SportsCategory")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ScheduleId");

                    b.HasIndex("DriverId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AMRoute")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Allergies")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AlternativeContact")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AlternativePhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("BusStop")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("DropoffAddress")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmergencyPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FieldTripPermission")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Grade")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeAddress")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("MedicalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Medications")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PMRoute")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentGuardian")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhotoPermission")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PickupAddress")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("School")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialAccommodations")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("SpecialNeeds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("TransportationNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.StudentSchedule", b =>
                {
                    b.Property<int>("StudentScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActivityScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssignmentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Attended")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DropoffLocation")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PickupLocation")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("StudentScheduleId");

                    b.HasIndex("ActivityScheduleId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentSchedules");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Trips.TripEvent", b =>
                {
                    b.Property<int>("TripEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdultSupervisorCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ApprovalRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LeaveTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("POCEmail")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("POCName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("POCPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReturnTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RouteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecialRequirements")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TripNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TripEventId");

                    b.HasIndex("DriverId");

                    b.ToTable("TripEvents");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 72,
                            Make = "Blue Bird",
                            Model = "Vision",
                            PlateNumber = "SCH-001"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 77,
                            Make = "Thomas Built",
                            Model = "C2",
                            PlateNumber = "SCH-002"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 71,
                            Make = "IC Bus",
                            Model = "CE200",
                            PlateNumber = "SCH-003"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 84,
                            Make = "Blue Bird",
                            Model = "All American RE",
                            PlateNumber = "SCH-004"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 90,
                            Make = "Thomas Built",
                            Model = "Saf-T-Liner HDX",
                            PlateNumber = "SCH-005"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 77,
                            Make = "IC Bus",
                            Model = "RE200",
                            PlateNumber = "SCH-006"
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 72,
                            Make = "Blue Bird",
                            Model = "Vision",
                            PlateNumber = "SCH-007"
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 77,
                            Make = "Thomas Built",
                            Model = "C2",
                            PlateNumber = "SCH-008"
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 71,
                            Make = "IC Bus",
                            Model = "CE200",
                            PlateNumber = "SCH-009"
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 48,
                            Make = "Blue Bird",
                            Model = "All American FE",
                            PlateNumber = "SCH-010"
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 24,
                            Make = "Thomas Built",
                            Model = "Minotour",
                            PlateNumber = "SCH-011"
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 90,
                            Make = "IC Bus",
                            Model = "AC200",
                            PlateNumber = "SCH-012"
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 30,
                            Make = "Blue Bird",
                            Model = "Micro Bird",
                            PlateNumber = "SCH-013"
                        },
                        new
                        {
                            Id = 14,
                            Capacity = 35,
                            Make = "Thomas Built",
                            Model = "EFX",
                            PlateNumber = "SCH-014"
                        },
                        new
                        {
                            Id = 15,
                            Capacity = 77,
                            Make = "IC Bus",
                            Model = "TE200",
                            PlateNumber = "SCH-015"
                        });
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Activity", b =>
                {
                    b.HasOne("BusBuddy.Core.Models.Destination", "DestinationEntity")
                        .WithMany("Activities")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BusBuddy.Core.Models.Driver", "Driver")
                        .WithMany("Activities")
                        .HasForeignKey("DriverId");

                    b.Navigation("DestinationEntity");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.ActivitySchedule", b =>
                {
                    b.HasOne("BusBuddy.Core.Models.Activity", null)
                        .WithMany("ActivitySchedules")
                        .HasForeignKey("ActivityId");

                    b.HasOne("BusBuddy.Core.Models.Driver", "ScheduledDriver")
                        .WithMany("ScheduledActivities")
                        .HasForeignKey("ScheduledDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusBuddy.Core.Models.Trips.TripEvent", "TripEvent")
                        .WithMany()
                        .HasForeignKey("TripEventId");

                    b.Navigation("ScheduledDriver");

                    b.Navigation("TripEvent");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Schedule", b =>
                {
                    b.HasOne("BusBuddy.Core.Models.Driver", "Driver")
                        .WithMany("Schedules")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.StudentSchedule", b =>
                {
                    b.HasOne("BusBuddy.Core.Models.ActivitySchedule", "ActivitySchedule")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("ActivityScheduleId");

                    b.HasOne("BusBuddy.Core.Models.Schedule", "Schedule")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("ScheduleId");

                    b.HasOne("BusBuddy.Core.Models.Student", "Student")
                        .WithMany("StudentSchedules")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivitySchedule");

                    b.Navigation("Schedule");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Trips.TripEvent", b =>
                {
                    b.HasOne("BusBuddy.Core.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Activity", b =>
                {
                    b.Navigation("ActivitySchedules");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.ActivitySchedule", b =>
                {
                    b.Navigation("StudentSchedules");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Destination", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Driver", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ScheduledActivities");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Schedule", b =>
                {
                    b.Navigation("StudentSchedules");
                });

            modelBuilder.Entity("BusBuddy.Core.Models.Student", b =>
                {
                    b.Navigation("StudentSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
