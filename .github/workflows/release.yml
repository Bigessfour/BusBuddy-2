name: 🚀 Release - Build & Package

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  DOTNET_VERSION: '8.0.x'
  BUILD_CONFIGURATION: Release

jobs:
  build-release:
    name: 🏗️ Build Release
    runs-on: windows-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      artifact-name: ${{ steps.package.outputs.artifact-name }}

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🏷️ Determine Version
      id: version
      shell: pwsh
      run: |
        if ($env:GITHUB_EVENT_NAME -eq "push" -and $env:GITHUB_REF -like "refs/tags/*") {
          $version = $env:GITHUB_REF -replace "refs/tags/", ""
        } elseif ($env:GITHUB_EVENT_NAME -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = "v0.0.0-dev"
        }

        Write-Host "Version: $version"
        echo "version=$version" >> $env:GITHUB_OUTPUT

    - name: 📦 Restore Dependencies
      run: dotnet restore BusBuddy.sln --verbosity minimal

    - name: 🏗️ Build Solution
      run: dotnet build BusBuddy.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore --verbosity minimal

    - name: 🧪 Run Tests
      run: dotnet test BusBuddy.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity minimal --logger trx
      continue-on-error: false

    - name: 📦 Publish Application
      shell: pwsh
      run: |
        Write-Host "🚀 Publishing BusBuddy application..." -ForegroundColor Cyan

        $publishDir = "publish"
        $version = "${{ steps.version.outputs.version }}"

        # Publish the WPF application
        dotnet publish BusBuddy.WPF/BusBuddy.WPF.csproj `
          --configuration ${{ env.BUILD_CONFIGURATION }} `
          --output $publishDir `
          --no-build `
          --verbosity minimal `
          --self-contained false `
          --runtime win-x64

        Write-Host "✅ Application published to $publishDir" -ForegroundColor Green

        # Create version info file
        $versionInfo = @{
          Version = $version
          BuildDate = (Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")
          GitCommit = $env:GITHUB_SHA
          GitRef = $env:GITHUB_REF
          Workflow = $env:GITHUB_WORKFLOW
          RunNumber = $env:GITHUB_RUN_NUMBER
        }

        $versionInfo | ConvertTo-Json -Depth 3 | Out-File "$publishDir/version.json" -Encoding UTF8
        Write-Host "✅ Version info created" -ForegroundColor Green

    - name: 📋 Package Application
      id: package
      shell: pwsh
      run: |
        Write-Host "📦 Creating application package..." -ForegroundColor Cyan

        $version = "${{ steps.version.outputs.version }}"
        $artifactName = "BusBuddy-$version-win-x64"
        $zipPath = "$artifactName.zip"

        # Create ZIP package
        Compress-Archive -Path "publish/*" -DestinationPath $zipPath -Force

        $zipSize = (Get-Item $zipPath).Length
        $zipSizeMB = [math]::Round($zipSize / 1MB, 2)

        Write-Host "✅ Package created: $zipPath ($zipSizeMB MB)" -ForegroundColor Green
        echo "artifact-name=$artifactName" >> $env:GITHUB_OUTPUT
        echo "zip-path=$zipPath" >> $env:GITHUB_OUTPUT
        echo "zip-size-mb=$zipSizeMB" >> $env:GITHUB_OUTPUT

    - name: 📤 Upload Release Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.package.outputs.artifact-name }}
        path: ${{ steps.package.outputs.zip-path }}
        retention-days: 30

    - name: 📋 Create Release Notes
      shell: pwsh
      run: |
        Write-Host "📝 Generating release notes..." -ForegroundColor Cyan

        $version = "${{ steps.version.outputs.version }}"
        $date = Get-Date -Format "yyyy-MM-dd"

        $releaseNotes = @"
# 🚌 BusBuddy $version Release

**📅 Release Date:** $date
**🏗️ Build:** ${{ github.run_number }}
**📋 Commit:** ${{ github.sha }}

## ✅ What's Included
- 🚌 **BusBuddy WPF Application** - Modern transportation management system
- 📊 **Steve's Quick Data Summary** - Interactive dashboard functionality
- 🎯 **Phase 1 Complete** - Core features and foundation established
- 📚 **Global Coding Standards** - 17 technology standards implemented
- 🔧 **Development Tools** - VS Code integration and build automation

## 🎯 Key Features
- **Driver Management** - Complete driver information and tracking
- **Vehicle Management** - Fleet management and monitoring
- **Activity Scheduling** - Transportation activity coordination
- **Real-time Dashboard** - Interactive data visualization
- **Standards Compliance** - Built with comprehensive coding standards

## 📦 Package Information
- **Size:** ${{ steps.package.outputs.zip-size-mb }} MB
- **Runtime:** .NET 8.0 (Windows x64)
- **UI Framework:** WPF with Syncfusion controls
- **Database:** Entity Framework Core with SQL Server

## 🚀 Installation
1. Download the release package
2. Extract to desired location
3. Ensure .NET 8.0 Runtime is installed
4. Run BusBuddy.WPF.exe

## 🎉 Highlights
- ✅ **Zero Build Errors** - Clean, professional codebase
- ✅ **Comprehensive Testing** - Automated CI/CD validation
- ✅ **Standards Documentation** - Complete language standards coverage
- ✅ **Steve's Happiness** - Interactive button functionality delivered!

---
**💝 Special Thanks:** This release represents the successful completion of Phase 1 goals with Steve's requested Quick Data Summary button working perfectly!
"@

        $releaseNotes | Out-File "RELEASE_NOTES.md" -Encoding UTF8
        Write-Host "✅ Release notes created" -ForegroundColor Green

    - name: 📤 Upload Release Notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes-${{ steps.version.outputs.version }}
        path: RELEASE_NOTES.md
        retention-days: 30

  create-github-release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: 📥 Download Release Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build-release.outputs.artifact-name }}

    - name: 📥 Download Release Notes
      uses: actions/download-artifact@v4
      with:
        name: release-notes-${{ needs.build-release.outputs.version }}

    - name: 🎉 Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.build-release.outputs.version }}
        name: 🚌 BusBuddy ${{ needs.build-release.outputs.version }}
        body_path: RELEASE_NOTES.md
        files: |
          ${{ needs.build-release.outputs.artifact-name }}.zip
        draft: false
        prerelease: ${{ contains(needs.build-release.outputs.version, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  repository-health-check:
    name: 🏥 Post-Release Health Check
    runs-on: windows-latest
    needs: build-release

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Repository Size Check
      shell: pwsh
      run: |
        Write-Host "🔍 Post-release repository health check..." -ForegroundColor Cyan

        if (Test-Path "check-repository-size.ps1") {
          & ".\check-repository-size.ps1" -AnalyzeOnly -Verbose
        } else {
          Write-Host "⚠️ Repository size script not found - manual check recommended" -ForegroundColor Yellow
        }

    - name: 📊 Build Performance Metrics
      shell: pwsh
      run: |
        Write-Host "📊 Recording build performance metrics..." -ForegroundColor Cyan

        $metrics = @{
          ReleaseVersion = "${{ needs.build-release.outputs.version }}"
          BuildDate = (Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")
          WorkflowRunTime = "${{ github.run_number }}"
          ArtifactSize = "${{ needs.build-release.outputs.zip-size-mb }} MB"
          GitCommit = "${{ github.sha }}"
          Status = "Success"
        }

        Write-Host "✅ Release metrics:" -ForegroundColor Green
        $metrics | ConvertTo-Json -Depth 3 | Write-Host

        # Could be extended to store metrics in a database or file for tracking




