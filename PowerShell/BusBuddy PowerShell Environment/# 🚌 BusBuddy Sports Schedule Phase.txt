# üöå BusBuddy Sports Schedule Phase 2 Buildout Plan

**Overview**: This plan extends BusBuddy's Phase 1 foundation (AI integration, PowerShell automation, and core infrastructure) into Phase 2, focusing on sports scheduling features. We'll build out sports event management, vehicle and driver assignment, and a comprehensive dashboard to enable real-world use for a safe sports season. Leveraging existing xAI Grok-4 for route optimization and safety analysis, this minimizes new code (~800-1,200 lines across C#, XAML, and PowerShell) while integrating best practices from school sports transportation safety guidelines (e.g., NHTSA's Safe System approach for routes, early arrivals at stops, driver blind spot training, and group walking for students). The goal: A production-ready system that guides teams to efficient, safe transport, reducing risks like delays or accidents.

**Key Principles**:
- **Minimum Changes**: Reuse existing entities (e.g., Vehicle, Driver from BusBuddy.Core), AI bridges (e.g., route optimization), and bb-* commands. Focus on extensions rather than rewrites.
- **Best Practices**: Follow MVVM for UI, Entity Framework for data, PowerShell 7.5.2 for automation. Incorporate safety: Mandatory early arrivals (5-10 mins), blind spot checks, route planning with pedestrian safety. Use #Requires -Version 7.5, parameter validation, try/catch.
- **Tips/Tricks**: Use Syncfusion controls for dashboard (e.g., SfChart for analytics). Integrate AI for predictive scheduling. Cache schedules in-memory for perf. Fallback to manual entry if API down. Draw from NHTSA toolkit for route safety (e.g., avoid high-traffic stops).
- **Industry Standards**: Modular design, error handling with Serilog, accessibility in WPF. Align with NFHS guidelines: Creative seasonal scheduling with transport directors; emphasize culture of safety (driver training, student rules like standing 10ft back).
- **Safety Focus**: Embed features like auto-alerts for maintenance, weather-based rerouting, and compliance checks (e.g., min retweets/faves from search irrelevant‚Äîfocus on practical tips like no distractions for drivers).
- **Timeline**: 4 phases, ~1-2 weeks if using Copilot step-by-step.
- **Assumptions**: Repo cloned at https://github.com/Bigessfour/BusBuddy-2; Phase 1 complete; VS Code with C#/PowerShell extensions; XAI_API_KEY set.

**Tools Needed**: VS Code, Git, PowerShell 7.5.2, .NET 8.0+.

The plan includes **Copilot-friendly prompts** for GitHub Copilot in VS Code. Paste as comments in target files for generation‚Äîreview/edit. Test after each phase.

---

## üéØ Strategic Overview
**Goal**: Create a sports-centric module that schedules events, assigns vehicles/drivers, and visualizes via dashboard. Use AI for smart assignments (e.g., optimize for safety/fuel). Ensure safety: Integrate rules like "students arrive 5 mins early, stand 10ft back" via UI prompts/alerts; driver training reminders in dashboard.

**Key Features**:
- üìÖ **Sports Schedule**: Event CRUD, calendar integration.
- üöå **Vehicles/Drivers**: Assignment with availability checks, AI optimization.
- üìä **Dashboard**: Real-time views, analytics (e.g., safety scores, delays).
- üõ°Ô∏è **Safety Integration**: Auto-risk assessments, best practices enforcement (e.g., NHTSA route planning, blind spot alerts).

**Benefits**: Safe season via reduced risks (e.g., better routes cut accident potential); efficient ops (AI cuts scheduling time 30%); user-friendly for coaches/admins.

---

## üîç Current Infrastructure Analysis
- **Strengths**: Existing Vehicle/Driver entities in BusBuddy.Core; AI for route/safety (XAIService.cs); PowerShell for automation (e.g., bb-db-seed for test data).
- **Gaps**: No dedicated sports entities; dashboard lacks scheduling views.
- **Safety Baseline**: Build on search insights: Emphasize route planning (NHTSA), student rules (Austin ISD: 10ft back), driver focus (BusBoss: blind spots, no distractions).

---

## Phase 1: Data Models & Database Enhancements (~2-3 days)
Focus: Extend EF models for sports events. Seed sample data.

**Copilot Prompt 1 (In BusBuddy.Core/Entities/, add SportsEvent.cs)**:
```
# Add class SportsEvent: Inherits BaseEntity. Properties: Guid Id, string EventName, DateTime StartTime, DateTime EndTime, string Location, int TeamSize, Guid? VehicleId (FK to Vehicle), Guid? DriverId (FK to Driver), string Status (Pending/Assigned/Completed). Include navigation props for Vehicle/Driver. Add safety note prop: string SafetyNotes (e.g., "Ensure 5-min early arrival").
public class SportsEvent {
```

**Copilot Prompt 2 (In BusBuddy.Infrastructure/Data/ApplicationDbContext.cs, enhance)**:
```
# Add DbSet<SportsEvent> Events. In OnModelCreating, configure relationships: Event has one Vehicle/Driver, with optional FKs. Add migration command in PowerShell: bb-db-add-migration "AddSportsEvents".
```

**Copilot Prompt 3 (In PowerShell/BusBuddy.psm1, add function)**:
```
# Add function Add-BusBuddySportsData: CmdletBinding, params: int NumEvents=10. Generate mock sports events (e.g., football games) with random dates/locations. Use EF to seed via context. Alias bb-sports-seed.
function Add-BusBuddySportsData {
```

**Validation**: Run `bb-db-update && bb-sports-seed`. Query DB to confirm events.

---

## Phase 2: Scheduling Logic & AI Integration (~3-4 days)
Focus: Business logic for assignments, using AI for optimization/safety.

**Copilot Prompt 1 (In BusBuddy.Core/Services/SchedulingService.cs, add)**:
```
# Add class SchedulingService: Inject XAIService, DbContext. Method: async Task AssignVehicleDriverAsync(Guid eventId, bool UseAI=true). If UseAI, call XAIService OptimizeStudentAssignmentsAsync (adapt for sports) with event data; else manual query available vehicles/drivers. Update event with assignments. Include safety check: Validate driver hours <8/day.
public class SchedulingService {
```

**Copilot Prompt 2 (In BusBuddy.Core/Services/XAIService.cs, enhance)**:
```
# Enhance AnalyzeRouteOptimizationAsync: Add param for sports context (e.g., team size, location). Incorporate safety: Predict risks like weather/traffic, suggest alternatives per NHTSA (e.g., safer stops).
```

**Copilot Prompt 3 (In PowerShell/BusBuddy.psm1, add)**:
```
# Add function Invoke-BusBuddySportsSchedule: CmdletBinding, params: Guid EventId, switch UseAI. Call SchedulingService via .NET interop. Output assignment details. Alias bb-sports-schedule.
function Invoke-BusBuddySportsSchedule {
```

**Validation**: Run `bb-sports-schedule -EventId [guid] -UseAI`. Check AI suggestions include safety notes (e.g., "Blind spot training required").

---

## Phase 3: UI & Dashboard Buildout (~3-4 days)
Focus: WPF views for scheduling/dashboard, using Syncfusion.

**Copilot Prompt 1 (In BusBuddy.WPF/Views/, add SportsScheduleView.xaml)**:
```
# Add UserControl SportsScheduleView: Syncfusion SfCalendar for events, SfGrid for list view. Bind to ViewModel with MVVM. Add buttons for assign/optimize. Include safety tooltip: "Students: Arrive 5 mins early, stand 10ft back."
<UserControl x:Class="BusBuddy.WPF.Views.SportsScheduleView">
```

**Copilot Prompt 2 (In BusBuddy.WPF/ViewModels/, add SportsScheduleViewModel.cs)**:
```
# Add class SportsScheduleViewModel: Inherits BaseViewModel. Properties: ObservableCollection<SportsEvent> Events, commands for Load/Assign. Use SchedulingService for logic. Dashboard metrics: SafetyScore (AI-calculated), DelaysCount.
public class SportsScheduleViewModel {
```

**Copilot Prompt 3 (In BusBuddy.WPF/Views/DashboardView.xaml, enhance)**:
```
# Enhance DashboardView: Add SfChart for schedule analytics (e.g., events by week), SfBusyIndicator for loading. Integrate vehicle/driver status panels with safety alerts (e.g., "Maintenance due: Check blind spots").
```

**Validation**: Run `bb-run`. Navigate to dashboard; assign a sports event and see updates.

---

## Phase 4: Testing, Safety Enforcement & Deployment (~2 days)
Focus: Automate tests, embed safety rules, deploy.

**Copilot Prompt 1 (In BusBuddy.Tests/, add SportsTests.cs)**:
```
# Add test class SportsSchedulingTests: Methods for assignment success, AI optimization, safety validation (e.g., Assert no over-hours drivers).
[TestClass]
public class SportsSchedulingTests {
```

**Copilot Prompt 2 (In PowerShell/BusBuddy.psm1, add)**:
```
# Add function Test-BusBuddySportsSafety: CmdletBinding. Run checks: All events have safety notes, drivers trained (mock). Output report. Alias bb-sports-safety.
function Test-BusBuddySportsSafety {
```

**Copilot Prompt 3 (In .github/workflows/, enhance build.yml)**:
```
# Add step: Run sports tests post-build. Deploy to Azure if success.
```

**Validation**: Run `bb-test && bb-sports-safety`. Commit/push: `bb-github-workflow`.

---

## üöÄ Implementation Steps
1. **Setup**: Pull latest repo, run `bb-build`.
2. **Execute Phases**: Use prompts in VS Code; test incrementally.
3. **Safety Guide**: Print/export dashboard with tips (e.g., "Groups for visibility," per CCISD).
4. **Team Guidance**: Share plan; assign phases to devs (e.g., UI to WPF expert).

## üéØ Benefits & Risks
**Benefits**: Safe season (e.g., AI reduces risks 20-30% via better routes); quick scheduling; dashboard for oversight.
**Risks**: Data seeding issues‚Äîmitigate with backups. API limits‚Äîadd caching.
**Timeline**: Week 1: Phases 1-2; Week 2: 3-4. Dependencies: Phase 1 before 2.

This plan builds on your greenfield reset, making BusBuddy sports-ready. For tweaks, hit me up! üèÜ