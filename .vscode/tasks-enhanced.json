{
  "version": "2.0.0",
  "options": {
    "cwd": "${workspaceFolder}",
    "env": {
      "DOTNET_CLI_TELEMETRY_OPTOUT": "1",
      "DOTNET_NOLOGO": "1",
      "BUSBUDDY_ENVIRONMENT": "Development",
      "BUSBUDDY_DEBUG_ENABLED": "true"
    }
  },
  "presentation": {
    "reveal": "always",
    "panel": "shared",
    "clear": true,
    "showReuseMessage": false,
    "group": "build-test-deploy"
  },
  "tasks": [
    {
      "label": "üßπ Clean All",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üßπ Cleaning solution...' -ForegroundColor Cyan; dotnet clean BusBuddy.sln --verbosity minimal; if (Test-Path './TestResults') { Remove-Item './TestResults' -Recurse -Force; Write-Host 'üóëÔ∏è Test results cleaned' -ForegroundColor Green }; if (Test-Path './logs') { Get-ChildItem './logs' -Filter '*.log' | Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-7) } | Remove-Item -Force; Write-Host 'üìù Old logs cleaned' -ForegroundColor Green }; Write-Host '‚úÖ Clean complete' -ForegroundColor Green"
      ],
      "group": "build",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Clean solution and remove old artifacts"
    },
    {
      "label": "üì¶ Restore & Update",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üì¶ Restoring packages...' -ForegroundColor Cyan; dotnet restore BusBuddy.sln --verbosity minimal --force --no-cache; Write-Host 'üîÑ Checking for package updates...' -ForegroundColor Yellow; dotnet list package --outdated --include-transitive; Write-Host '‚úÖ Restore complete' -ForegroundColor Green"
      ],
      "group": "build",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Restore packages and check for updates"
    },
    {
      "label": "üî® Build with Analysis",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üî® Building solution with analysis...' -ForegroundColor Cyan; $startTime = Get-Date; dotnet build BusBuddy.sln --verbosity normal --configuration Debug --no-restore; $buildTime = (Get-Date) - $startTime; Write-Host \"‚è±Ô∏è Build completed in $($buildTime.TotalSeconds.ToString('F2')) seconds\" -ForegroundColor Green; if ($LASTEXITCODE -eq 0) { Write-Host '‚úÖ Build successful' -ForegroundColor Green } else { Write-Host '‚ùå Build failed' -ForegroundColor Red; exit $LASTEXITCODE }"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": [
        "$msCompile"
      ],
      "dependsOn": [
        "üì¶ Restore & Update"
      ],
      "dependsOrder": "sequence",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Build solution with performance timing and analysis"
    },
    {
      "label": "üß™ Test with Coverage",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üß™ Running tests with coverage...' -ForegroundColor Cyan; $startTime = Get-Date; dotnet test BusBuddy.sln --no-build --settings testsettings.runsettings --collect 'XPlat Code Coverage' --results-directory './TestResults' --logger 'console;verbosity=normal' --logger 'trx;LogFileName=test-results.trx'; $testTime = (Get-Date) - $startTime; Write-Host \"‚è±Ô∏è Tests completed in $($testTime.TotalSeconds.ToString('F2')) seconds\" -ForegroundColor Green; if ($LASTEXITCODE -eq 0) { Write-Host '‚úÖ All tests passed' -ForegroundColor Green } else { Write-Host '‚ùå Some tests failed' -ForegroundColor Red }"
      ],
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "problemMatcher": [
        "$msCompile"
      ],
      "dependsOn": [
        "üî® Build with Analysis"
      ],
      "dependsOrder": "sequence",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Run all tests with coverage analysis and timing"
    },
    {
      "label": "üöÄ Run Application",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üöÄ Starting BusBuddy WPF Application...' -ForegroundColor Cyan; cd 'BusBuddy.WPF'; dotnet run --no-build"
      ],
      "group": "build",
      "problemMatcher": [
        "$msCompile"
      ],
      "dependsOn": [
        "üî® Build with Analysis"
      ],
      "dependsOrder": "sequence",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true,
        "focus": true
      },
      "detail": "Launch the WPF application with enhanced output"
    },
    {
      "label": "‚ö° Quick Development Cycle",
      "dependsOn": [
        "üßπ Clean All",
        "üì¶ Restore & Update",
        "üî® Build with Analysis",
        "üß™ Test with Coverage"
      ],
      "dependsOrder": "sequence",
      "group": "build",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "runOptions": {
        "reevaluateOnRerun": true
      },
      "detail": "Complete development cycle: clean ‚Üí restore ‚Üí build ‚Üí test"
    },
    {
      "label": "üîÑ CI/CD Simulation",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üîÑ Simulating CI/CD Pipeline...' -ForegroundColor Cyan; Write-Host '1Ô∏è‚É£ Clean Phase' -ForegroundColor Yellow; dotnet clean BusBuddy.sln --verbosity minimal; Write-Host '2Ô∏è‚É£ Restore Phase' -ForegroundColor Yellow; dotnet restore BusBuddy.sln --verbosity minimal; Write-Host '3Ô∏è‚É£ Build Phase' -ForegroundColor Yellow; dotnet build BusBuddy.sln --verbosity minimal --configuration Release --no-restore; Write-Host '4Ô∏è‚É£ Test Phase' -ForegroundColor Yellow; dotnet test BusBuddy.sln --no-build --configuration Release --logger 'console;verbosity=minimal'; Write-Host '5Ô∏è‚É£ Package Phase' -ForegroundColor Yellow; dotnet pack BusBuddy.sln --no-build --configuration Release --output './artifacts'; Write-Host '‚úÖ CI/CD Simulation Complete' -ForegroundColor Green"
      ],
      "group": "build",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true
      },
      "detail": "Simulate full CI/CD pipeline with Release configuration"
    },
    {
      "label": "üîç Deep Project Analysis",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üîç Running Deep Project Analysis...' -ForegroundColor Cyan; Write-Host 'üìä Project Structure Analysis:' -ForegroundColor Yellow; Get-ChildItem -Recurse -Include '*.csproj', '*.sln' | ForEach-Object { Write-Host \"  - $($_.Name) ($($_.Length) bytes)\" }; Write-Host 'üì¶ Package Analysis:' -ForegroundColor Yellow; dotnet list package --include-transitive | Select-String 'PackageReference' | Measure-Object | ForEach-Object { Write-Host \"  - Total packages: $($_.Count)\" }; Write-Host 'üîß Build Configuration Analysis:' -ForegroundColor Yellow; Get-Content 'Directory.Build.props' | Select-String 'TargetFramework', 'LangVersion'; Write-Host 'üìù Code Metrics:' -ForegroundColor Yellow; Get-ChildItem -Recurse -Include '*.cs' | Measure-Object | ForEach-Object { Write-Host \"  - C# files: $($_.Count)\" }; Get-ChildItem -Recurse -Include '*.xaml' | Measure-Object | ForEach-Object { Write-Host \"  - XAML files: $($_.Count)\" }; Write-Host '‚úÖ Analysis Complete' -ForegroundColor Green"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true
      },
      "detail": "Comprehensive project structure and metrics analysis"
    },
    {
      "label": "ü©∫ Health & Performance Check",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'ü©∫ Running Health & Performance Check...' -ForegroundColor Cyan; Write-Host 'üíæ Disk Space Check:' -ForegroundColor Yellow; Get-WmiObject -Class Win32_LogicalDisk | Where-Object { $_.DeviceID -eq 'C:' } | ForEach-Object { $freeGB = [math]::Round($_.FreeSpace / 1GB, 2); Write-Host \"  - Available: $freeGB GB\" }; Write-Host 'üß† Memory Check:' -ForegroundColor Yellow; $memory = Get-WmiObject -Class Win32_OperatingSystem; $freeMemGB = [math]::Round($memory.FreePhysicalMemory / 1MB, 2); Write-Host \"  - Available: $freeMemGB GB\"; Write-Host '‚ö° PowerShell Performance:' -ForegroundColor Yellow; Measure-Command { Get-Process | Where-Object { $_.ProcessName -like '*dotnet*' } } | ForEach-Object { Write-Host \"  - Command time: $($_.TotalMilliseconds)ms\" }; Write-Host 'üîß Build Environment:' -ForegroundColor Yellow; dotnet --version | ForEach-Object { Write-Host \"  - .NET version: $_\" }; $PSVersionTable.PSVersion | ForEach-Object { Write-Host \"  - PowerShell: $_\" }; Write-Host '‚úÖ Health Check Complete' -ForegroundColor Green"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true
      },
      "detail": "System health and performance diagnostics"
    },
    {
      "label": "üêõ Debug Preparation",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üêõ Preparing Debug Environment...' -ForegroundColor Cyan; Write-Host 'üîß Setting debug environment variables...' -ForegroundColor Yellow; $env:BUSBUDDY_DEBUG_ENABLED = 'true'; $env:BUSBUDDY_VERBOSE_LOGGING = 'true'; $env:DOTNET_ENVIRONMENT = 'Development'; Write-Host 'üìù Checking debug symbols...' -ForegroundColor Yellow; Get-ChildItem -Recurse -Path './BusBuddy.WPF/bin/Debug' -Filter '*.pdb' | ForEach-Object { Write-Host \"  - Found: $($_.Name)\" }; Write-Host 'üîç Validating debug configuration...' -ForegroundColor Yellow; if (Test-Path './.vscode/launch.json') { Write-Host '  - launch.json: ‚úÖ' -ForegroundColor Green } else { Write-Host '  - launch.json: ‚ùå' -ForegroundColor Red }; Write-Host '‚úÖ Debug environment ready' -ForegroundColor Green"
      ],
      "group": "test",
      "problemMatcher": [],
      "dependsOn": [
        "üî® Build with Analysis"
      ],
      "dependsOrder": "sequence",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Prepare optimal debug environment with validation"
    },
    {
      "label": "üìä Performance Profiling Setup",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üìä Setting up Performance Profiling...' -ForegroundColor Cyan; Write-Host 'üîß Installing diagnostic tools...' -ForegroundColor Yellow; dotnet tool list -g | Select-String 'dotnet-trace' | ForEach-Object { Write-Host '  - dotnet-trace: Already installed' -ForegroundColor Green } ?? { dotnet tool install --global dotnet-trace; Write-Host '  - dotnet-trace: Installed' -ForegroundColor Green }; dotnet tool list -g | Select-String 'dotnet-counters' | ForEach-Object { Write-Host '  - dotnet-counters: Already installed' -ForegroundColor Green } ?? { dotnet tool install --global dotnet-counters; Write-Host '  - dotnet-counters: Installed' -ForegroundColor Green }; Write-Host 'üìÅ Creating profiling directory...' -ForegroundColor Yellow; if (!(Test-Path './profiling')) { New-Item -ItemType Directory -Path './profiling' | Out-Null; Write-Host '  - Created ./profiling directory' -ForegroundColor Green }; Write-Host '‚úÖ Profiling setup complete' -ForegroundColor Green"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Setup performance profiling tools and environment"
    },
    {
      "label": "üßπ Deep Clean & Reset",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üßπ Deep Clean & Reset...' -ForegroundColor Cyan; Write-Host 'üóëÔ∏è Cleaning build artifacts...' -ForegroundColor Yellow; Get-ChildItem -Recurse -Directory -Name 'bin', 'obj' | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue; Write-Host 'üì¶ Clearing NuGet cache...' -ForegroundColor Yellow; dotnet nuget locals all --clear; Write-Host 'üîÑ Clearing VS Code cache...' -ForegroundColor Yellow; if (Test-Path './.vscode/.ropeproject') { Remove-Item './.vscode/.ropeproject' -Recurse -Force -ErrorAction SilentlyContinue }; Write-Host 'üìù Cleaning log files...' -ForegroundColor Yellow; Get-ChildItem -Path './logs' -Filter '*.log' -ErrorAction SilentlyContinue | Remove-Item -Force; Write-Host 'üß™ Cleaning test results...' -ForegroundColor Yellow; if (Test-Path './TestResults') { Remove-Item './TestResults' -Recurse -Force }; Write-Host '‚úÖ Deep clean complete' -ForegroundColor Green"
      ],
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true
      },
      "detail": "Comprehensive cleanup of all build artifacts and caches"
    },
    {
      "label": "üîê Security Audit",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üîê Running Security Audit...' -ForegroundColor Cyan; Write-Host 'üì¶ Checking for vulnerable packages...' -ForegroundColor Yellow; dotnet list package --vulnerable --include-transitive; Write-Host 'üîç Scanning PowerShell scripts...' -ForegroundColor Yellow; if (Get-Module -ListAvailable -Name PSScriptAnalyzer) { Get-ChildItem -Filter '*.ps1' -Recurse | ForEach-Object { $issues = Invoke-ScriptAnalyzer -Path $_.FullName -IncludeRule 'PSAvoidUsingPlainTextForPassword', 'PSAvoidUsingConvertToSecureStringWithPlainText', 'PSUsePSCredentialType'; if ($issues) { Write-Host \"  ‚ö†Ô∏è Security issues in $($_.Name): $($issues.Count)\" -ForegroundColor Red } } } else { Write-Host '  - PSScriptAnalyzer not available' -ForegroundColor Yellow }; Write-Host 'üîí Checking file permissions...' -ForegroundColor Yellow; Get-ChildItem -Filter '*.ps1' | ForEach-Object { $acl = Get-Acl $_.FullName; if ($acl.Access | Where-Object { $_.FileSystemRights -match 'FullControl' -and $_.IdentityReference -eq 'Everyone' }) { Write-Host \"  ‚ö†Ô∏è Overly permissive: $($_.Name)\" -ForegroundColor Red } }; Write-Host '‚úÖ Security audit complete' -ForegroundColor Green"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true
      },
      "detail": "Comprehensive security audit of packages and scripts"
    },
    {
      "label": "‚ö° PowerShell Workflow Enhancement",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/load-bus-buddy-profiles.ps1",
        "-Force",
        ";",
        "Write-Host '‚ö° Enhanced PowerShell Workflow Active' -ForegroundColor Green; bb-dev-session"
      ],
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true,
        "focus": true
      },
      "isBackground": true,
      "detail": "Start enhanced PowerShell development session with all workflows"
    },
    {
      "label": "üìà Generate Development Report",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "$report = @(); $report += '=== BusBuddy Development Report ==='; $report += \"Generated: $(Get-Date)\"; $report += ''; $report += '=== Build Status ==='; dotnet build BusBuddy.sln --verbosity quiet; if ($LASTEXITCODE -eq 0) { $report += '‚úÖ Build: SUCCESS' } else { $report += '‚ùå Build: FAILED' }; $report += ''; $report += '=== Test Results ==='; dotnet test BusBuddy.sln --no-build --verbosity quiet; if ($LASTEXITCODE -eq 0) { $report += '‚úÖ Tests: ALL PASSED' } else { $report += '‚ùå Tests: SOME FAILED' }; $report += ''; $report += '=== Project Metrics ==='; $csFiles = (Get-ChildItem -Recurse -Include '*.cs' | Measure-Object).Count; $xamlFiles = (Get-ChildItem -Recurse -Include '*.xaml' | Measure-Object).Count; $report += \"C# Files: $csFiles\"; $report += \"XAML Files: $xamlFiles\"; $report | Out-String | Write-Host; $report | Out-File './development-report.txt' -Encoding UTF8; Write-Host 'üìÑ Report saved to development-report.txt' -ForegroundColor Green"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true
      },
      "detail": "Generate comprehensive development status report"
    }
  ]
}
