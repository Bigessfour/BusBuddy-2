{
  "version": "2.0.0",
  "options": {
    "cwd": "${workspaceFolder}",
    "env": {
      "DOTNET_CLI_TELEMETRY_OPTOUT": "1",
      "DOTNET_NOLOGO": "1",
      "DOTNET_ENVIRONMENT": "Development"
    }
  },
  "tasks": [
    {
      "label": "üöÄ Enhanced: Build with Output Capture",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/enhanced-task-monitor.ps1",
        "-TaskName",
        "BusBuddy Build",
        "-Command",
        "dotnet",
        "-Arguments",
        "build,BusBuddy.sln,--verbosity,normal,--nologo",
        "-WaitForCompletion",
        "-CaptureOutput",
        "-ShowRealTime",
        "-OutputFile",
        "logs/build-output-${input:timestamp}.log"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": [
        "$msCompile"
      ],
      "detail": "üöÄ Enhanced build with comprehensive output capture and completion detection"
    },
    {
      "label": "üéØ Enhanced: Run with Monitoring",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/enhanced-task-monitor.ps1",
        "-TaskName",
        "BusBuddy Application",
        "-Command",
        "dotnet",
        "-Arguments",
        "run,--project,BusBuddy.WPF/BusBuddy.WPF.csproj",
        "-CaptureOutput",
        "-ShowRealTime",
        "-OutputFile",
        "logs/run-output-${input:timestamp}.log",
        "-TimeoutSeconds",
        "120"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": false,
        "clear": true
      },
      "isBackground": false,
      "detail": "üéØ Enhanced run with real-time monitoring and output capture"
    },
    {
      "label": "üß™ Enhanced: Test with Results",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/enhanced-task-monitor.ps1",
        "-TaskName",
        "BusBuddy Tests",
        "-Command",
        "dotnet",
        "-Arguments",
        "test,BusBuddy.sln,--verbosity,normal,--nologo",
        "-WaitForCompletion",
        "-CaptureOutput",
        "-ShowRealTime",
        "-OutputFile",
        "logs/test-output-${input:timestamp}.log"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": [
        "$msCompile"
      ],
      "detail": "üß™ Enhanced test execution with comprehensive results capture"
    },
    {
      "label": "üè• Enhanced: Health Check",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "& '${workspaceFolder}/enhanced-task-monitor.ps1'; Start-BusBuddyTask -TaskType Health -WaitForCompletion $true -CaptureOutput $true -ShowRealTime $true"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": false,
        "clear": true
      },
      "detail": "üè• Enhanced health check with comprehensive system validation"
    },
    {
      "label": "üßπ Enhanced: Clean with Verification",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "& '${workspaceFolder}/enhanced-task-monitor.ps1'; Start-BusBuddyTask -TaskType Clean -WaitForCompletion $true -CaptureOutput $true -ShowRealTime $true"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": false,
        "clear": true
      },
      "detail": "üßπ Enhanced clean with verification and output capture"
    },
    {
      "label": "üìä View Latest Task Output",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üìä Latest Task Output Files:' -ForegroundColor Cyan; Get-ChildItem -Path 'logs' -Filter '*-output-*.log' | Sort-Object LastWriteTime -Descending | Select-Object -First 5 | ForEach-Object { Write-Host \"  üìÑ $($_.Name) - $($_.LastWriteTime.ToString('HH:mm:ss'))\" -ForegroundColor White }; Write-Host ''; $latest = Get-ChildItem -Path 'logs' -Filter '*-output-*.log' | Sort-Object LastWriteTime -Descending | Select-Object -First 1; if ($latest) { Write-Host \"üìñ Opening latest: $($latest.Name)\" -ForegroundColor Yellow; Get-Content $latest.FullName -Tail 50 | ForEach-Object { if ($_ -match 'ERR:') { Write-Host $_ -ForegroundColor Red } elseif ($_ -match 'OUT:') { Write-Host $_ -ForegroundColor White } else { Write-Host $_ -ForegroundColor Gray } } } else { Write-Host '‚ùå No output files found' -ForegroundColor Red }"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": false,
        "clear": true
      },
      "detail": "üìä View the latest task output with syntax highlighting"
    },
    {
      "label": "üîç Monitor Task Output (Live)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "$latest = Get-ChildItem -Path 'logs' -Filter '*-output-*.log' | Sort-Object LastWriteTime -Descending | Select-Object -First 1; if ($latest) { Write-Host \"üîç Live monitoring: $($latest.Name)\" -ForegroundColor Cyan; Write-Host 'Press Ctrl+C to stop' -ForegroundColor Yellow; Get-Content $latest.FullName -Wait -Tail 10 | ForEach-Object { $timestamp = Get-Date -Format 'HH:mm:ss.fff'; if ($_ -match 'ERR:') { Write-Host \"[$timestamp] $_\" -ForegroundColor Red } elseif ($_ -match 'OUT:') { Write-Host \"[$timestamp] $_\" -ForegroundColor White } else { Write-Host \"[$timestamp] $_\" -ForegroundColor Gray } } } else { Write-Host '‚ùå No output files found to monitor' -ForegroundColor Red }"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": false,
        "clear": true
      },
      "isBackground": true,
      "detail": "üîç Live monitoring of the latest task output file"
    }
  ],
  "inputs": [
    {
      "id": "timestamp",
      "type": "command",
      "command": "extension.commandvariable.transform",
      "args": {
        "text": "${input:dateTime}",
        "find": "^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}).*$",
        "replace": "$1$2$3-$4$5$6"
      }
    },
    {
      "id": "dateTime",
      "type": "command",
      "command": "extension.commandvariable.dateTimeInEditor",
      "args": {
        "format": "YYYY-MM-DDTHH:mm:ss"
      }
    }
  ]
}