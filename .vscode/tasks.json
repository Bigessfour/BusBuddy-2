{
  "version": "2.0.0",
  "options": {
    "cwd": "${workspaceFolder}",
    "env": {
      "DOTNET_CLI_TELEMETRY_OPTOUT": "1",
      "DOTNET_NOLOGO": "1",
      "DOTNET_ENVIRONMENT": "Development"
    }
  },
  "tasks": [
    // =============================================================================
    // BASIC DOTNET TASKS
    // =============================================================================
    {
      "label": "Clean",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "clean",
        "BusBuddy.sln"
      ],
      "group": "build",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Clean the Bus Buddy solution"
    },
    {
      "label": "Restore Packages",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "restore",
        "BusBuddy.sln"
      ],
      "group": "build",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Restore NuGet packages"
    },
    {
      "label": "Build",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "build",
        "BusBuddy.sln",
        "--verbosity",
        "normal"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "dependsOn": [
        "Restore Packages"
      ],
      "dependsOrder": "sequence",
      "detail": "Build the Bus Buddy solution"
    },
    {
      "label": "Rebuild",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "build",
        "BusBuddy.sln",
        "--no-incremental",
        "--verbosity",
        "normal"
      ],
      "group": "build",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "dependsOn": "Clean",
      "detail": "Clean and rebuild the Bus Buddy solution"
    },
    {
      "label": "Run App",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "run",
        "--project",
        "BusBuddy.WPF/BusBuddy.WPF.csproj",
        "--configuration",
        "Debug"
      ],
      "group": "test",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "dependsOn": "Build",
      "detail": "Build and run the WPF application"
    },
    {
      "label": "Run Tests",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "test",
        "BusBuddy.sln",
        "--no-build"
      ],
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "dependsOn": [
        "Build"
      ],
      "dependsOrder": "sequence",
      "detail": "Run all tests"
    },
    {
      "label": "Run Tests with Coverage",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "test",
        "BusBuddy.sln",
        "--settings",
        "testsettings.runsettings",
        "--collect",
        "XPlat Code Coverage",
        "--results-directory",
        "${workspaceFolder}/TestResults"
      ],
      "group": "test",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "dependsOn": [
        "Build"
      ],
      "dependsOrder": "sequence",
      "detail": "Run tests with code coverage analysis"
    },
    {
      "label": "Format Code",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "format",
        "BusBuddy.sln"
      ],
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Format code using dotnet format"
    },
    {
      "label": "Publish Application",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "publish",
        "BusBuddy.WPF/BusBuddy.WPF.csproj",
        "--configuration",
        "Release",
        "--output",
        "${workspaceFolder}/publish",
        "--self-contained",
        "false"
      ],
      "group": "build",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "dependsOn": [
        "Build"
      ],
      "dependsOrder": "sequence",
      "detail": "Publish WPF application for deployment (framework-dependent)"
    },
    {
      "label": "Publish Application (Self-Contained)",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "publish",
        "BusBuddy.WPF/BusBuddy.WPF.csproj",
        "--configuration",
        "Release",
        "--output",
        "${workspaceFolder}/publish-standalone",
        "--self-contained",
        "true",
        "--runtime",
        "win-x64",
        "/p:PublishSingleFile=true"
      ],
      "group": "build",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "dependsOn": [
        "Build"
      ],
      "dependsOrder": "sequence",
      "detail": "Publish WPF application as self-contained single executable"
    },
    // =============================================================================
    // COMPOSITE DEVELOPMENT TASKS
    // =============================================================================
    {
      "label": "Complete Development Cycle",
      "dependsOn": [
        "Clean",
        "Restore Packages",
        "Build",
        "Run Tests"
      ],
      "dependsOrder": "sequence",
      "group": "build",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "runOptions": {
        "reevaluateOnRerun": true
      },
      "detail": "Full cycle: clean, restore, build, test"
    },
    {
      "label": "Quick Build & Test",
      "dependsOn": [
        "Build",
        "Run Tests"
      ],
      "dependsOrder": "sequence",
      "group": "test",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Quick build and test"
    },
    // =============================================================================
    // SYNCFUSION UI VALIDATION TASKS
    // =============================================================================
    {
      "label": "Validate UI",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "Tools/Scripts/Syncfusion-Implementation-Validator.ps1"
      ],
      "group": "test",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Validate Syncfusion UI implementation and XAML health"
    },
    {
      "label": "Check Themes",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "Tools/Scripts/bb-theme-check.ps1"
      ],
      "group": "test",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Check Syncfusion theme consistency and resource validation"
    },
    // =============================================================================
    // ADVANCED POWERSHELL WORKFLOW TASKS
    // =============================================================================
    {
      "label": "BB: Build Solution",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Set-Location '${workspaceFolder}'; if (Test-Path '.\\load-bus-buddy-profiles.ps1') { & '.\\load-bus-buddy-profiles.ps1' -Quiet; bb-build } else { dotnet build BusBuddy.sln --verbosity normal }"
      ],
      "group": "build",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Build the solution using advanced PowerShell workflows"
    },
    {
      "label": "BB: Clean and Build",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Set-Location '${workspaceFolder}'; if (Test-Path '.\\load-bus-buddy-profiles.ps1') { & '.\\load-bus-buddy-profiles.ps1' -Quiet; bb-clean; bb-build } else { dotnet clean BusBuddy.sln; dotnet build BusBuddy.sln --verbosity normal }"
      ],
      "group": "build",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Clean and build the solution using advanced PowerShell workflows"
    },
    {
      "label": "BB: Run Application",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Set-Location '${workspaceFolder}'; if (Test-Path '.\\load-bus-buddy-profiles.ps1') { & '.\\load-bus-buddy-profiles.ps1' -Quiet; bb-run } else { dotnet run --project BusBuddy.WPF/BusBuddy.WPF.csproj }"
      ],
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Run the application using advanced PowerShell workflows"
    },
    {
      "label": "BB: Test Solution",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Set-Location '${workspaceFolder}'; if (Test-Path '.\\load-bus-buddy-profiles.ps1') { & '.\\load-bus-buddy-profiles.ps1' -Quiet; bb-test } else { dotnet test BusBuddy.sln }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Run tests using advanced PowerShell workflows"
    },
    {
      "label": "BB: Start Development Session",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Set-Location '${workspaceFolder}'; if (Test-Path '.\\load-bus-buddy-profiles.ps1') { & '.\\load-bus-buddy-profiles.ps1' -Quiet; bb-dev-session } else { Write-Host 'Advanced workflows not available' -ForegroundColor Yellow }"
      ],
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "isBackground": true,
      "detail": "Start a complete development session with comprehensive setup"
    },
    {
      "label": "BB: Quick Test Cycle",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Set-Location '${workspaceFolder}'; if (Test-Path '.\\load-bus-buddy-profiles.ps1') { & '.\\load-bus-buddy-profiles.ps1' -Quiet; bb-quick-test } else { dotnet build BusBuddy.sln; dotnet test BusBuddy.sln }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Quick build-test-validate cycle with performance monitoring"
    },
    {
      "label": "BB: Start Debug",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Set-Location '${workspaceFolder}'; if (Test-Path '.\\load-bus-buddy-profiles.ps1') { & '.\\load-bus-buddy-profiles.ps1' -Quiet; bb-debug-start } else { Write-Host 'Debug workflows not available' -ForegroundColor Yellow }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "isBackground": true,
      "detail": "Start debug monitoring with advanced workflows"
    },
    // =============================================================================
    // HEALTH CHECK AND DIAGNOSTIC TASKS
    // =============================================================================
    {
      "label": "Health Check & Diagnostics",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Set-Location '${workspaceFolder}'; if (Test-Path '.\\load-bus-buddy-profiles.ps1') { & '.\\load-bus-buddy-profiles.ps1' -Quiet; bb-health } else { Write-Host 'Basic health check'; dotnet build BusBuddy.sln --verbosity quiet && Write-Host 'Build: OK' -ForegroundColor Green || Write-Host 'Build: FAILED' -ForegroundColor Red }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Run health checks using advanced workflows"
    },
    {
      "label": "Advanced Diagnostics",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Set-Location '${workspaceFolder}'; if (Test-Path '.\\load-bus-buddy-profiles.ps1') { & '.\\load-bus-buddy-profiles.ps1' -Quiet; bb-diagnostic } else { Write-Host 'Basic diagnostic check'; Get-ChildItem -Recurse -Include '*.cs','*.xaml','*.ps1' | Measure-Object | Select-Object Count }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "runOptions": {
        "reevaluateOnRerun": true
      },
      "detail": "Comprehensive system analysis and reporting"
    },
    // =============================================================================
    // POWERSHELL PROFILE AND MAINTENANCE TASKS
    // =============================================================================
    {
      "label": "Initialize PowerShell Profiles",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Set-Location '${workspaceFolder}'; if (Test-Path '.\\load-bus-buddy-profiles.ps1') { & '.\\load-bus-buddy-profiles.ps1' -Force } else { Write-Host 'PowerShell profiles not found' -ForegroundColor Red }"
      ],
      "group": "none",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Force reload all PowerShell profiles"
    },
    {
      "label": "PowerShell Profile Analysis",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Set-Location '${workspaceFolder}'; Write-Host 'Analyzing PowerShell Profile Performance...' -ForegroundColor Cyan; Measure-Command { if (Test-Path '.\\load-bus-buddy-profiles.ps1') { & '.\\load-bus-buddy-profiles.ps1' } }; Get-Command bb-* -ErrorAction SilentlyContinue | Measure-Object | Select-Object Count; Write-Host 'Profile analysis complete' -ForegroundColor Green"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Analyze PowerShell profile loading performance and available commands"
    },
    // =============================================================================
    // CODE QUALITY AND ANALYSIS TASKS
    // =============================================================================
    {
      "label": "Analyze PowerShell Scripts",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "if (Get-Module -ListAvailable -Name PSScriptAnalyzer) { Invoke-ScriptAnalyzer -Path '${workspaceFolder}' -Recurse -IncludeDefaultRules } else { Write-Host 'PSScriptAnalyzer not installed. Install with: Install-Module -Name PSScriptAnalyzer' -ForegroundColor Yellow }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Analyze PowerShell scripts for best practices"
    },
    {
      "label": "Fix PowerShell Code Issues",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Write-Host 'Fixing PowerShell Code Issues...' -ForegroundColor Cyan; try { $results = Invoke-ScriptAnalyzer -Path '.' -Recurse -Fix -Settings './PSScriptAnalyzerSettings.psd1' -ErrorAction Stop; Write-Host \"Fixed $($results.Count) auto-fixable issues\" -ForegroundColor Green } catch { Write-Host 'Auto-fix not supported, running analysis only...' -ForegroundColor Yellow }; Write-Host 'Running final analysis...' -ForegroundColor Yellow; $remaining = Invoke-ScriptAnalyzer -Path '.' -Recurse -Settings './PSScriptAnalyzerSettings.psd1' | Where-Object { $_.Severity -in @('Error', 'Warning') }; Write-Host \"Remaining issues: $($remaining.Count)\" -ForegroundColor $(if($remaining.Count -eq 0) {'Green'} else {'Red'}); if($remaining.Count -gt 0) { $remaining | Select-Object -First 10 | Format-Table -Property RuleName, Severity, ScriptName, Line -AutoSize }"
      ],
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Automatically fix PowerShell code issues using PSScriptAnalyzer"
    },
    {
      "label": "PowerShell Script Security Scan",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "if (Get-Module -ListAvailable -Name PSScriptAnalyzer) { Get-ChildItem -Path '${workspaceFolder}' -Filter '*.ps1' -Recurse | ForEach-Object -Parallel { Write-Host \"Scanning: $($_.Name)\" -ForegroundColor Cyan; Invoke-ScriptAnalyzer -Path $_.FullName -Severity 'Error' -IncludeRule 'PSAvoidUsingPlainTextForPassword', 'PSAvoidUsingConvertToSecureStringWithPlainText', 'PSUsePSCredentialType' } -ThrottleLimit 3 } else { Write-Host 'Install PSScriptAnalyzer for security analysis' -ForegroundColor Red }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Security-focused analysis of PowerShell scripts"
    },
    // =============================================================================
    // TEST RESULT AND COVERAGE TASKS
    // =============================================================================
    {
      "label": "Generate Coverage Report",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "if (Test-Path './TestResults') { $latestCoverage = Get-ChildItem './TestResults' -Recurse -Filter 'coverage.cobertura.xml' | Sort-Object LastWriteTime -Descending | Select-Object -First 1; if ($latestCoverage) { Write-Host \"Coverage report found: $($latestCoverage.FullName)\" -ForegroundColor Green; if (Get-Command reportgenerator -ErrorAction SilentlyContinue) { reportgenerator \"-reports:$($latestCoverage.FullName)\" '-targetdir:./TestResults/CoverageReport' '-reporttypes:Html'; Write-Host 'HTML coverage report generated in ./TestResults/CoverageReport' -ForegroundColor Green } else { Write-Host 'Install ReportGenerator: dotnet tool install -g dotnet-reportgenerator-globaltool' -ForegroundColor Yellow } } else { Write-Host 'No coverage files found. Run tests with coverage first.' -ForegroundColor Red } } else { Write-Host 'TestResults directory not found. Run tests with coverage first.' -ForegroundColor Red }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Generate HTML coverage report from test results"
    },
    {
      "label": "Clean Test Results",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "if (Test-Path './TestResults') { Remove-Item './TestResults' -Recurse -Force; Write-Host 'Test results cleaned' -ForegroundColor Green } else { Write-Host 'No test results to clean' -ForegroundColor Yellow }"
      ],
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "detail": "Clean test results and coverage data"
    },
    // =============================================================================
    // GIT AND VERSION CONTROL TASKS
    // =============================================================================
    {
      "label": "Git Commit and Push",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Write-Host '🔄 Starting Git operations...' -ForegroundColor Cyan; git add .vscode/BusBuddy-Advanced-Workflows.ps1 load-bus-buddy-profiles.ps1 && git commit -m 'Fix PowerShell profile loading and terminal integration' && git push origin main && Write-Host '✅ Changes pushed to GitHub' -ForegroundColor Green"
      ],
      "group": "none",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Commit and push changes to GitHub"
    },
    {
      "label": "PowerShell-Git-GitHub Alignment",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/align-git-github-ps752.ps1"
      ],
      "group": "none",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Align PowerShell 7.5.2 with Git and GitHub"
    },
    // =============================================================================
    // BACKGROUND MONITORING TASKS
    // =============================================================================
    {
      "label": "Monitor Build & Test",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "while ($true) { Write-Host '=== Build & Test Monitor ===' -ForegroundColor Cyan; dotnet build BusBuddy.sln --verbosity quiet && (Write-Host '✅ Build successful' -ForegroundColor Green; dotnet test BusBuddy.sln --no-build --verbosity quiet && Write-Host '✅ Tests passed' -ForegroundColor Green || Write-Host '❌ Tests failed' -ForegroundColor Red) || Write-Host '❌ Build failed' -ForegroundColor Red; Write-Host \"Last check: $(Get-Date -Format 'HH:mm:ss')\" -ForegroundColor Gray; Start-Sleep 30 }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "isBackground": true,
      "detail": "Monitor build and test status continuously"
    },
    {
      "label": "PowerShell Code Quality Monitor",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "while ($true) { Clear-Host; Write-Host '=== PowerShell Code Quality Monitor ===' -ForegroundColor Cyan; $issues = Invoke-ScriptAnalyzer -Path '.' -Recurse | Where-Object { $_.Severity -in @('Error', 'Warning') }; Write-Host \"Total Issues: $($issues.Count)\" -ForegroundColor $($issues.Count -eq 0 ? 'Green' : 'Yellow'); $issues | Group-Object RuleName | Sort-Object Count -Descending | Select-Object -First 10 | Format-Table Name, Count; Start-Sleep 10 }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "isBackground": true,
      "detail": "Monitor PowerShell code quality in real-time"
    },
    {
      "label": "PowerShell Security Monitor",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "while ($true) { Write-Host '=== Security Monitor ===' -ForegroundColor Red; $securityIssues = Invoke-ScriptAnalyzer -Path '.' -Recurse -IncludeRule 'PSAvoidUsingPlainTextForPassword', 'PSAvoidUsingConvertToSecureStringWithPlainText', 'PSUsePSCredentialType', 'PSAvoidUsingInvokeExpression' | Where-Object { $_.Severity -eq 'Error' }; $message = ($securityIssues.Count -eq 0) ? '✅ No security issues detected' : \"⚠️ $($securityIssues.Count) security issues found\"; $color = ($securityIssues.Count -eq 0) ? 'Green' : 'Red'; Write-Host $message -ForegroundColor $color; ($securityIssues.Count -gt 0) && ($securityIssues | Select-Object -First 5 | Format-Table RuleName, ScriptName, Line); Start-Sleep 60 }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "isBackground": true,
      "detail": "Monitor PowerShell security issues continuously"
    },
    // =============================================================================
    // CONFIGURATION TESTING AND VALIDATION TASKS
    // =============================================================================
    {
      "label": "Test VS Code Configuration",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Write-Host '=== VS Code PowerShell 7.5.2 Configuration Test ===' -ForegroundColor Cyan; Write-Host 'PowerShell Version:' -ForegroundColor Yellow; Get-Host | Select-Object Name, Version; Write-Host 'Workspace Path Test:' -ForegroundColor Yellow; Write-Host \"Workspace: ${workspaceFolder}\" -ForegroundColor Green; Write-Host 'File System Test:' -ForegroundColor Yellow; Test-Path '${workspaceFolder}/BusBuddy.sln' | ForEach-Object { Write-Host \"Solution found: $_\" -ForegroundColor $(if($_) {'Green'} else {'Red'}) }; Write-Host 'Task Integration Test:' -ForegroundColor Yellow; Write-Host 'All tests completed successfully!' -ForegroundColor Green"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Test VS Code PowerShell 7.5.2 configuration and path handling"
    },
    {
      "label": "Validate Task Execution",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Write-Host '=== Task Execution Validation ===' -ForegroundColor Cyan; Write-Host 'Testing dotnet CLI availability:' -ForegroundColor Yellow; try { $version = dotnet --version; Write-Host \".NET Version: $version\" -ForegroundColor Green } catch { Write-Host 'dotnet CLI not found!' -ForegroundColor Red }; Write-Host 'Testing workspace access:' -ForegroundColor Yellow; Set-Location '${workspaceFolder}'; Get-Location | Write-Host -ForegroundColor Green; Write-Host 'Testing PowerShell profile loading:' -ForegroundColor Yellow; if (Test-Path '.\\load-bus-buddy-profiles.ps1') { Write-Host 'Profile loader found' -ForegroundColor Green } else { Write-Host 'Profile loader not found' -ForegroundColor Yellow }; Write-Host 'Validation completed!' -ForegroundColor Green"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Validate task execution environment and dependencies"
    },
    {
      "label": "Troubleshoot Tasks",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Write-Host '=== VS Code Task Troubleshooting ===' -ForegroundColor Cyan; Write-Host 'VS Code Version:' -ForegroundColor Yellow; try { code --version } catch { Write-Host 'VS Code CLI not available' -ForegroundColor Red }; Write-Host 'PowerShell Version:' -ForegroundColor Yellow; Get-Host | Select-Object Name, Version; Write-Host 'Environment Check:' -ForegroundColor Yellow; Write-Host \"DOTNET_ENVIRONMENT: $env:DOTNET_ENVIRONMENT\" -ForegroundColor Green; Write-Host \"DOTNET_CLI_TELEMETRY_OPTOUT: $env:DOTNET_CLI_TELEMETRY_OPTOUT\" -ForegroundColor Green; Write-Host 'Task Shell Check:' -ForegroundColor Yellow; Write-Host 'Current shell configuration verified.' -ForegroundColor Green; Write-Host 'Check View > Output > Tasks for detailed logs.' -ForegroundColor Cyan"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Troubleshoot VS Code task execution and view output panel guidance"
    },
    // =============================================================================
    // ADDITIONAL .NET THRIVING TASKS (POWERSHELL 7.5.2 OPTIMIZED)
    // =============================================================================
    {
      "label": "System Information (Modern PS 7.5.2)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Write-Host '=== Modern PowerShell 7.5.2 System Information ===' -ForegroundColor Cyan; Write-Host 'OS Information:' -ForegroundColor Yellow; Get-CimInstance -Class Win32_OperatingSystem | Select-Object Caption, Version, Architecture | Format-Table -AutoSize; Write-Host 'Hardware Information:' -ForegroundColor Yellow; Get-CimInstance -Class Win32_ComputerSystem | Select-Object Name, TotalPhysicalMemory, NumberOfProcessors | Format-Table -AutoSize; Write-Host 'Disk Usage:' -ForegroundColor Yellow; Get-CimInstance -Class Win32_LogicalDisk | Where-Object { $_.DriveType -eq 3 } | ForEach-Object { $freePercent = [math]::Round(($_.FreeSpace / $_.Size) * 100, 2); Write-Host \"Drive $($_.DeviceID): $freePercent% free\" -ForegroundColor $($freePercent -gt 20 ? 'Green' : 'Red') }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Modern PowerShell 7.5.2 system information using Get-CimInstance and ternary operators"
    },
    {
      "label": "Check .NET Version",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Write-Host '=== .NET Environment Check ===' -ForegroundColor Cyan; Write-Host 'PowerShell Version:' -ForegroundColor Yellow; $PSVersionTable.PSVersion; Write-Host '.NET Version:' -ForegroundColor Yellow; dotnet --version; Write-Host '.NET SDKs:' -ForegroundColor Yellow; dotnet --list-sdks; Write-Host '.NET Runtimes:' -ForegroundColor Yellow; dotnet --list-runtimes; Write-Host 'MSBuild Version:' -ForegroundColor Yellow; dotnet build --version"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Check .NET SDK, runtimes, and MSBuild tools availability"
    },
    {
      "label": "Modern Process & Network Analysis",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Write-Host '=== Modern PowerShell 7.5.2 Process & Network Analysis ===' -ForegroundColor Cyan; Write-Host 'High CPU Processes:' -ForegroundColor Yellow; Get-Process | Where-Object { $_.CPU -gt 10 } | Sort-Object CPU -Descending | Select-Object -First 5 | ForEach-Object { Write-Host \"$($_.Name): $([math]::Round($_.CPU, 2))s CPU\" -ForegroundColor $($_.CPU -gt 50 ? 'Red' : 'Yellow') }; Write-Host 'Running Services:' -ForegroundColor Yellow; $runningServices = Get-Service | Where-Object { $_.Status -eq 'Running' }; Write-Host \"Total running services: $($runningServices.Count)\" -ForegroundColor Green; Write-Host 'Network Connectivity:' -ForegroundColor Yellow; @('google.com', 'github.com') | ForEach-Object { $result = Test-Connection -ComputerName $_ -Count 1 -Quiet; Write-Host \"$_: $($result ? 'Online' : 'Offline')\" -ForegroundColor $($result ? 'Green' : 'Red') }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Modern PowerShell 7.5.2 process and network analysis with ternary operators"
    },
    {
      "label": "Update PowerShell Modules",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Write-Host '=== PowerShell Module Updates (July 2025) ===' -ForegroundColor Cyan; Write-Host 'Checking for PowerShell updates...' -ForegroundColor Yellow; Write-Host 'To check for updates manually, run: Update-Module' -ForegroundColor Green; Write-Host 'PowerShell 7.5.2 version check complete' -ForegroundColor Green"
      ],
      "group": "none",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Check for PowerShell 7.5.2 module updates (July 2025)"
    },
    {
      "label": "Advanced System Health (PS 7.5.2 Features)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Write-Host '=== Advanced PowerShell 7.5.2 System Health Check ===' -ForegroundColor Cyan; Write-Host 'Event Log Analysis (Modern):' -ForegroundColor Yellow; $events = Get-WinEvent -LogName Application -MaxEvents 5 -ErrorAction SilentlyContinue; $events?.Count -gt 0 ? (Write-Host \"Found $($events.Count) recent events\" -ForegroundColor Green) : (Write-Host 'No recent events found' -ForegroundColor Yellow); Write-Host 'System Performance JSON Export:' -ForegroundColor Yellow; $perfData = Get-Process | Select-Object -First 3 Name, CPU, WorkingSet | ConvertTo-Json -Depth 3 -Compress; $perfData?.Length -gt 0 ? (Write-Host 'Performance data exported successfully' -ForegroundColor Green) : (Write-Host 'No performance data available' -ForegroundColor Red); Write-Host 'Network Connectivity (Parallel):' -ForegroundColor Yellow; @('github.com', 'nuget.org', 'microsoft.com') | ForEach-Object -Parallel { $result = Test-Connection -ComputerName $_ -Count 1 -Quiet -TimeoutSeconds 3; \"$_`: $($result ? 'Online' : 'Offline')\" } -ThrottleLimit 3 | ForEach-Object { Write-Host $_ -ForegroundColor Green }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Advanced PowerShell 7.5.2 features: Get-WinEvent, null conditionals, parallel processing, JSON with depth"
    },
    {
      "label": "WPF Build Validation",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-c",
        "Write-Host '=== WPF Build Environment Validation ===' -ForegroundColor Cyan; Write-Host 'Checking .NET WPF support...' -ForegroundColor Yellow; dotnet --list-runtimes | Where-Object { $_ -like '*WindowsDesktop*' } | ForEach-Object { Write-Host $_ -ForegroundColor Green }; Write-Host 'Testing WPF project build...' -ForegroundColor Yellow; dotnet build BusBuddy.WPF/BusBuddy.WPF.csproj --verbosity quiet && Write-Host 'WPF build test: SUCCESS' -ForegroundColor Green || Write-Host 'WPF build test: FAILED' -ForegroundColor Red"
      ],
      "group": "test",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": true,
        "clear": true
      },
      "detail": "Validate WPF build environment and MSBuild tools"
    },
    // =============================================================================
    // STEP 3 EXAMPLE TASKS (MICROSOFT BEST PRACTICE PATTERNS)
    // =============================================================================
    {
      "label": "Step3: Build Example",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "build",
        "${workspaceFolder}\\BusBuddy.sln"
      ],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": "$msCompile",
      "options": {
        "shell": {
          "executable": "C:\\Program Files\\PowerShell\\7\\pwsh.exe",
          "args": [
            "-NoProfile",
            "-c"
          ]
        }
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "detail": "Step 3 example: .NET build task running in PowerShell 7.5.2"
    },
    {
      "label": "Step3: Test Example",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "test"
      ],
      "group": "test",
      "problemMatcher": "$msCompile",
      "options": {
        "shell": {
          "executable": "C:\\Program Files\\PowerShell\\7\\pwsh.exe",
          "args": [
            "-NoProfile",
            "-c"
          ]
        }
      },
      "detail": "Step 3 example: .NET test task with PowerShell 7.5.2"
    },
    {
      "label": "Step3: Run Custom PS Script",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-File",
        "${workspaceFolder}\\load-bus-buddy-profiles.ps1"
      ],
      "problemMatcher": [],
      "detail": "Step 3 example: Custom PowerShell script execution"
    }
  ]
}