{
    "version": "2.0.0",
    "options": {
        "cwd": "${workspaceFolder}",
        "env": {
            "COPILOT_WORKFLOW_MODE": "STREAMLINED"
        }
    },
    "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
    },
    "tasks": [
        {
            "label": "Clean Solution",
            "command": "dotnet",
            "type": "process",
            "args": [
                "clean",
                "BusBuddy.sln",
                "--verbosity",
                "minimal"
            ],
            "group": "build",
            "problemMatcher": ["$msCompile"]
        },
        {
            "label": "Restore Packages",
            "command": "dotnet",
            "type": "process",
            "args": [
                "restore",
                "BusBuddy.sln",
                "--verbosity",
                "minimal"
            ],
            "group": "build",
            "problemMatcher": ["$msCompile"]
        },
        {
            "label": "Build Solution",
            "command": "dotnet",
            "type": "process",
            "args": [
                "build",
                "BusBuddy.sln",
                "--verbosity",
                "minimal"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": ["$msCompile"],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "Run Application",
            "command": "dotnet",
            "type": "process",
            "args": [
                "run",
                "--project",
                "BusBuddy.WPF/BusBuddy.WPF.csproj",
                "--verbosity",
                "minimal"
            ],
            "group": "build",
            "isBackground": true,
            "problemMatcher": ["$msCompile"],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üîÑ Streamlined Build & Test",
            "type": "shell",
            "command": "powershell",
            "args": [
                "-Command",
                "Write-Host 'üöÄ STREAMLINED WORKFLOW: Starting build and validation...' -ForegroundColor Cyan; dotnet build BusBuddy.sln --verbosity minimal; if ($LASTEXITCODE -eq 0) { Write-Host '‚úÖ Build successful - Ready for next step' -ForegroundColor Green; } else { Write-Host '‚ùå Build failed - Check output above' -ForegroundColor Red; }"
            ],
            "group": {
                "kind": "build",
                "isDefault": false
            },
            "problemMatcher": ["$msCompile"],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üîß Format XAML Files",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "& '${workspaceFolder}/Tools/Scripts/Format-XamlFiles.ps1' -Path '${workspaceFolder}' -Format"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üîç Validate XAML Files",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module '${workspaceFolder}/Tools/Scripts/XAML-Tools.ps1'; Get-ChildItem -Path '${workspaceFolder}' -Filter '*.xaml' -Recurse | ForEach-Object { Write-Host \"Validating: $($_.Name)\" -ForegroundColor Yellow; Test-XamlValidity -FilePath $_.FullName }"
            ],
            "group": "test",
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üé® Format All XAML (Structure-Aware)",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Import-Module '${workspaceFolder}/Tools/Scripts/XAML-Tools.ps1'; Get-ChildItem -Path '${workspaceFolder}' -Filter '*.xaml' -Recurse | ForEach-Object { Write-Host \"Formatting: $($_.Name)\" -ForegroundColor Cyan; Format-XamlFile -FilePath $_.FullName }"
            ],
            "group": "build",
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üîç Validate Syncfusion Namespaces",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host 'üîç SYNCFUSION VALIDATION: Checking XAML files for missing namespaces...' -ForegroundColor Cyan; $missingNamespaces = @(); Get-ChildItem -Path '${workspaceFolder}\\BusBuddy.WPF\\Views' -Filter '*.xaml' -Recurse | ForEach-Object { $content = Get-Content $_.FullName -Raw; if ($content -notmatch 'xmlns:syncfusion=' -and ($content -match 'sf:' -or $content -match 'syncfusion:')) { $missingNamespaces += $_.Name; Write-Host \"‚ùå Missing Syncfusion namespace: $($_.Name)\" -ForegroundColor Red } else { Write-Host \"‚úÖ Valid: $($_.Name)\" -ForegroundColor Green } }; if ($missingNamespaces.Count -eq 0) { Write-Host 'üéâ All XAML files have proper Syncfusion namespaces!' -ForegroundColor Green; exit 0 } else { Write-Host \"‚ö†Ô∏è Found $($missingNamespaces.Count) files with missing Syncfusion namespaces\" -ForegroundColor Yellow; exit 1 }"
            ],
            "group": "test",
            "problemMatcher": [],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": false
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üõ†Ô∏è Comprehensive XAML Corruption Check",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host 'üõ†Ô∏è COMPREHENSIVE CORRUPTION CHECK: Analyzing XAML files...' -ForegroundColor Cyan; $issues = @(); Get-ChildItem -Path '${workspaceFolder}' -Filter '*.xaml' -Recurse | ForEach-Object { $content = Get-Content $_.FullName -Raw; $fileName = $_.Name; if ($content -match '--(?!>)') { $issues += \"$fileName: Contains double-dash in comments\"; Write-Host \"‚ö†Ô∏è $fileName: Double-dash in XML comments\" -ForegroundColor Yellow } if ($content -match '<[^>]*[^/]>\\s*</[^>]*>') { $issues += \"$fileName: Empty elements not self-closed\"; Write-Host \"‚ö†Ô∏è $fileName: Empty elements should be self-closed\" -ForegroundColor Yellow } if ($content -match 'x:Name\\s*=\\s*\"[^\"]*[^A-Za-z0-9_][^\"]*\"') { $issues += \"$fileName: Invalid x:Name format\"; Write-Host \"‚ö†Ô∏è $fileName: Invalid x:Name format\" -ForegroundColor Yellow } if ($content -match '\\sxmlns:(?!xml|x=)\\w+\\s*=\\s*\"[^\"]*\"(?![^<]*/>)' -and $content -notmatch 'xmlns:syncfusion=') { Write-Host \"‚úÖ $fileName: Custom namespaces detected\" -ForegroundColor Green } }; if ($issues.Count -eq 0) { Write-Host 'üéâ No XAML corruption detected!' -ForegroundColor Green } else { Write-Host \"üîß Found $($issues.Count) potential issues. Review and fix before proceeding.\" -ForegroundColor Yellow; $issues | ForEach-Object { Write-Host \"  - $_\" -ForegroundColor Red } }"
            ],
            "group": "test",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üéØ Advanced C# Corruption Detection",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host 'üéØ C# CORRUPTION DETECTION: Analyzing source files...' -ForegroundColor Cyan; $issues = @(); Get-ChildItem -Path '${workspaceFolder}' -Filter '*.cs' -Recurse | Where-Object { $_.FullName -notmatch '\\\\(bin|obj|packages)\\\\' } | ForEach-Object { $content = Get-Content $_.FullName -Raw; $fileName = $_.Name; if ($content -match 'using\\s+System\\.Windows\\.Forms') { $issues += \"$fileName: WinForms reference in WPF project\"; Write-Host \"‚ö†Ô∏è $fileName: WinForms reference detected\" -ForegroundColor Yellow } if ($content -match 'Console\\.WriteLine') { $issues += \"$fileName: Console.WriteLine should use Serilog\"; Write-Host \"‚ö†Ô∏è $fileName: Use Logger instead of Console.WriteLine\" -ForegroundColor Yellow } if ($content -match '\\bnull!') { $issues += \"$fileName: Null-forgiving operator usage\"; Write-Host \"‚ö†Ô∏è $fileName: Review null-forgiving operator usage\" -ForegroundColor Yellow } if ($content -match 'public\\s+(?!class|interface|enum|struct|delegate)\\w+\\s+\\w+\\s*{\\s*get;\\s*set;\\s*}' -and $content -notmatch '\\[ObservableProperty\\]') { Write-Host \"‚ÑπÔ∏è $fileName: Consider ObservableProperty for auto-properties\" -ForegroundColor Blue } }; if ($issues.Count -eq 0) { Write-Host 'üéâ No C# corruption patterns detected!' -ForegroundColor Green } else { Write-Host \"üîß Found $($issues.Count) potential C# issues. Review coding standards.\" -ForegroundColor Yellow; $issues | ForEach-Object { Write-Host \"  - $_\" -ForegroundColor Red } }"
            ],
            "group": "test",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üîç Full Project Validation Suite",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host 'üîç FULL PROJECT VALIDATION: Running comprehensive checks...' -ForegroundColor Cyan; Write-Host 'Step 1: Validating Syncfusion namespaces...' -ForegroundColor White; & '${workspaceFolder}/.vscode/validate-syncfusion.ps1'; Write-Host 'Step 2: Checking XAML corruption...' -ForegroundColor White; & '${workspaceFolder}/.vscode/validate-xaml.ps1'; Write-Host 'Step 3: Analyzing C# patterns...' -ForegroundColor White; & '${workspaceFolder}/.vscode/validate-csharp.ps1'; Write-Host '‚úÖ Validation suite completed!' -ForegroundColor Green"
            ],
            "group": "test",
            "problemMatcher": ["$msCompile"],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "dependsOrder": "sequence"
        },
        {
            "label": "‚ö° Build and Wait for Completion",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host 'üöÄ Starting build process...' -ForegroundColor Cyan; $startTime = Get-Date; dotnet build BusBuddy.sln --verbosity minimal --nologo; $exitCode = $LASTEXITCODE; $duration = ((Get-Date) - $startTime).TotalSeconds; if ($exitCode -eq 0) { Write-Host \"‚úÖ Build completed successfully in $([math]::Round($duration, 2)) seconds\" -ForegroundColor Green; } else { Write-Host \"‚ùå Build failed with exit code $exitCode after $([math]::Round($duration, 2)) seconds\" -ForegroundColor Red; } Write-Host 'üìä Build process finished.' -ForegroundColor White; exit $exitCode"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": ["$msCompile"],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üß™ Test and Wait for Completion",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host 'üß™ Starting test execution...' -ForegroundColor Cyan; $startTime = Get-Date; dotnet test BusBuddy.sln --verbosity minimal --nologo --no-build; $exitCode = $LASTEXITCODE; $duration = ((Get-Date) - $startTime).TotalSeconds; if ($exitCode -eq 0) { Write-Host \"‚úÖ Tests completed successfully in $([math]::Round($duration, 2)) seconds\" -ForegroundColor Green; } else { Write-Host \"‚ùå Tests failed with exit code $exitCode after $([math]::Round($duration, 2)) seconds\" -ForegroundColor Red; } Write-Host 'üìä Test execution finished.' -ForegroundColor White; exit $exitCode"
            ],
            "group": "test",
            "problemMatcher": ["$msCompile"],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üîß Clean and Wait for Completion",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host 'üîß Starting clean process...' -ForegroundColor Cyan; $startTime = Get-Date; dotnet clean BusBuddy.sln --verbosity minimal --nologo; $exitCode = $LASTEXITCODE; $duration = ((Get-Date) - $startTime).TotalSeconds; if ($exitCode -eq 0) { Write-Host \"‚úÖ Clean completed successfully in $([math]::Round($duration, 2)) seconds\" -ForegroundColor Green; } else { Write-Host \"‚ùå Clean failed with exit code $exitCode after $([math]::Round($duration, 2)) seconds\" -ForegroundColor Red; } Write-Host 'üìä Clean process finished.' -ForegroundColor White; exit $exitCode"
            ],
            "group": "build",
            "problemMatcher": ["$msCompile"],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        },
        {
            "label": "üîÑ Complete Build Cycle with Wait",
            "type": "shell",
            "command": "pwsh",
            "args": [
                "-Command",
                "Write-Host 'üîÑ Starting complete build cycle...' -ForegroundColor Cyan; $totalStart = Get-Date; Write-Host 'üìã Step 1/3: Cleaning...' -ForegroundColor White; dotnet clean BusBuddy.sln --verbosity minimal --nologo; if ($LASTEXITCODE -ne 0) { Write-Host '‚ùå Clean failed!' -ForegroundColor Red; exit $LASTEXITCODE } Write-Host 'üì¶ Step 2/3: Restoring packages...' -ForegroundColor White; dotnet restore BusBuddy.sln --verbosity minimal --nologo; if ($LASTEXITCODE -ne 0) { Write-Host '‚ùå Restore failed!' -ForegroundColor Red; exit $LASTEXITCODE } Write-Host 'üî® Step 3/3: Building...' -ForegroundColor White; dotnet build BusBuddy.sln --verbosity minimal --nologo; if ($LASTEXITCODE -ne 0) { Write-Host '‚ùå Build failed!' -ForegroundColor Red; exit $LASTEXITCODE } $totalDuration = ((Get-Date) - $totalStart).TotalSeconds; Write-Host \"‚úÖ Complete build cycle finished successfully in $([math]::Round($totalDuration, 2)) seconds\" -ForegroundColor Green; exit 0"
            ],
            "group": "build",
            "problemMatcher": ["$msCompile"],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "shared",
                "showReuseMessage": false,
                "clear": true
            },
            "options": {
                "cwd": "${workspaceFolder}"
            }
        }
    ]
}
