{
  "version": "2.0.0",
  "options": {
    "cwd": "${workspaceFolder}",
    "env": {
      "DOTNET_CLI_TELEMETRY_OPTOUT": "1",
      "DOTNET_NOLOGO": "1"
    }
  },
  "problemMatchers": [
    {
      "name": "busbuddy-csharp",
      "owner": "busbuddy",
      "fileLocation": "absolute",
      "pattern": {
        "regexp": "^(.*)\\((\\d+),(\\d+)\\):\\s+(error|warning|info)\\s+(\\w+):\\s+(.*)$",
        "file": 1,
        "line": 2,
        "column": 3,
        "severity": 4,
        "code": 5,
        "message": 6
      }
    },
    {
      "name": "busbuddy-xaml",
      "owner": "busbuddy",
      "fileLocation": "absolute",
      "pattern": {
        "regexp": "^.*?([^\\s]+\\.xaml)\\((\\d+),(\\d+)\\):\\s+(error|warning)\\s+(.*)$",
        "file": 1,
        "line": 2,
        "column": 3,
        "severity": 4,
        "message": 5
      }
    },
    {
      "name": "busbuddy-powershell",
      "owner": "busbuddy",
      "fileLocation": "absolute",
      "pattern": {
        "regexp": "^.*At\\s+(.+?):(\\d+)\\s+char:(\\d+)(.*)$",
        "file": 1,
        "line": 2,
        "column": 3,
        "severity": "error",
        "message": 4
      }
    },
    {
      "name": "busbuddy-serilog",
      "owner": "busbuddy",
      "fileLocation": "absolute",
      "pattern": [
        {
          "regexp": "^\\[(.*)\\]\\s+(ERROR|WARN|INFO|DEBUG)\\s+-\\s+(.*)\\s+at\\s+(.*)\\s+in\\s+(.*):(\\d+)$",
          "file": 5,
          "line": 6,
          "severity": 2,
          "message": 3
        }
      ]
    }
  ],
  "tasks": [
    {
      "label": "PowerShell-Git-GitHub Alignment",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/align-git-github-ps752.ps1"
      ],
      "group": "none",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true,
        "focus": true
      },
      "detail": "Align PowerShell 7.5.2 with Git and GitHub"
    },
    {
      "label": "Clean Solution",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "clean",
        "BusBuddy.sln"
      ],
      "group": "build",
      "problemMatcher": [
        "$busbuddy-csharp"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Clean build artifacts"
    },
    {
      "label": "Restore Packages",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "restore",
        "BusBuddy.sln"
      ],
      "group": "build",
      "problemMatcher": [
        "$busbuddy-csharp"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Restore NuGet packages"
    },
    {
      "label": "Build Solution",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "build",
        "BusBuddy.sln",
        "--verbosity",
        "minimal"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": [
        "$busbuddy-csharp",
        "$busbuddy-xaml"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Build the solution",
      "dependsOn": [
        "Restore Packages"
      ]
    },
    {
      "label": "Run Tests",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "test",
        "BusBuddy.sln",
        "--no-build"
      ],
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "problemMatcher": [
        "$busbuddy-csharp"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "dependsOn": [
        "Build Solution"
      ],
      "detail": "Run all tests"
    },
    {
      "label": "Run Application",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "run",
        "--project",
        "BusBuddy.WPF/BusBuddy.WPF.csproj"
      ],
      "group": "build",
      "problemMatcher": [
        "$busbuddy-csharp"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "clear": true
      },
      "dependsOn": [
        "Build Solution"
      ],
      "detail": "Launch the WPF app"
    },
    {
      "label": "Complete Development Cycle",
      "dependsOn": [
        "Clean Solution",
        "Restore Packages",
        "Build Solution",
        "Run Tests"
      ],
      "group": "build",
      "problemMatcher": [
        "$busbuddy-csharp"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Full cycle: clean, restore, build, test"
    },
    {
      "label": "Quick Build & Test",
      "dependsOn": [
        "Build Solution",
        "Run Tests"
      ],
      "group": "test",
      "problemMatcher": [
        "$busbuddy-csharp"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Quick build and test"
    },
    {
      "label": "Health Check & Diagnostics",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-Command",
        "Set-Location '${workspaceFolder}'; . '.\\.vscode\\BusBuddy-Advanced-Workflows.ps1'; bb-health; bb-diagnostic"
      ],
      "group": "test",
      "problemMatcher": [
        "$busbuddy-powershell"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Run health checks"
    },
    {
      "label": "Serilog Development Monitor",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-Command",
        "Set-Location '${workspaceFolder}'; . '.\\.vscode\\BusBuddy-Advanced-Workflows.ps1'; bb-build | Where-Object { $_ -match 'Serilog|ERROR|WARN' }"
      ],
      "group": "build",
      "problemMatcher": [
        "$busbuddy-serilog",
        "$busbuddy-csharp"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Monitor Serilog during build"
    },
    {
      "label": "Publish Application",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "publish",
        "BusBuddy.WPF/BusBuddy.WPF.csproj",
        "--configuration",
        "Release"
      ],
      "group": "build",
      "problemMatcher": [
        "$busbuddy-csharp"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "dependsOn": [
        "Build Solution"
      ],
      "detail": "Publish for deployment"
    },
    {
      "label": "Format Code",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "format",
        "BusBuddy.sln"
      ],
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Format code using dotnet format"
    },
    {
      "label": "Run Tests with Coverage",
      "type": "shell",
      "command": "dotnet",
      "args": [
        "test",
        "BusBuddy.sln",
        "--settings",
        "testsettings.runsettings",
        "--collect",
        "XPlat Code Coverage",
        "--results-directory",
        "./TestResults"
      ],
      "group": "test",
      "problemMatcher": [
        "$msCompile"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "dependsOn": [
        "Build Solution"
      ],
      "detail": "Run tests with code coverage analysis"
    },
    {
      "label": "Generate Coverage Report",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-Command",
        "if (Test-Path './TestResults') { $latestCoverage = Get-ChildItem './TestResults' -Recurse -Filter 'coverage.cobertura.xml' | Sort-Object LastWriteTime -Descending | Select-Object -First 1; if ($latestCoverage) { Write-Host \"Coverage report found: $($latestCoverage.FullName)\" -ForegroundColor Green; if (Get-Command reportgenerator -ErrorAction SilentlyContinue) { reportgenerator \"-reports:$($latestCoverage.FullName)\" '-targetdir:./TestResults/CoverageReport' '-reporttypes:Html'; Write-Host 'HTML coverage report generated in ./TestResults/CoverageReport' -ForegroundColor Green } else { Write-Host 'Install ReportGenerator: dotnet tool install -g dotnet-reportgenerator-globaltool' -ForegroundColor Yellow } } else { Write-Host 'No coverage files found. Run tests with coverage first.' -ForegroundColor Red } } else { Write-Host 'TestResults directory not found. Run tests with coverage first.' -ForegroundColor Red }"
      ],
      "group": "test",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Generate HTML coverage report from test results"
    },
    {
      "label": "Clean Test Results",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-Command",
        "if (Test-Path './TestResults') { Remove-Item './TestResults' -Recurse -Force; Write-Host 'Test results cleaned' -ForegroundColor Green } else { Write-Host 'No test results to clean' -ForegroundColor Yellow }"
      ],
      "group": "build",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Clean test results and coverage data"
    },
    {
      "label": "Analyze PowerShell Scripts",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-Command",
        "if (Get-Module -ListAvailable -Name PSScriptAnalyzer) { Invoke-ScriptAnalyzer -Path '${workspaceFolder}' -Recurse -IncludeDefaultRules } else { Write-Host 'PSScriptAnalyzer not installed. Install with: Install-Module -Name PSScriptAnalyzer' -ForegroundColor Yellow }"
      ],
      "group": "test",
      "problemMatcher": [
        "$busbuddy-powershell"
      ],
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "clear": true
      },
      "detail": "Analyze PowerShell scripts for best practices"
    }
  ]
}